
ATMEGA128_VendingMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  0000117e  00001212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080018e  0080018e  000012a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001357  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  00002713  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eee  00000000  00000000  00003087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000712  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000629  00000000  00000000  0000481a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	00 00       	nop
       4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_12>
      34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_26>
      6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df 02       	muls	r29, r31
      8e:	ea 02       	muls	r30, r26
      90:	00 03       	mulsu	r16, r16
      92:	0f 03       	fmul	r16, r23
      94:	4f 03       	fmul	r20, r23
      96:	57 03       	mulsu	r21, r23
      98:	6f 03       	fmul	r22, r23
      9a:	78 04       	cpc	r7, r8
      9c:	28 05       	cpc	r18, r8
      9e:	0c 05       	cpc	r16, r12
      a0:	f0 04       	cpc	r15, r0
      a2:	d4 04       	cpc	r13, r4
      a4:	b8 04       	cpc	r11, r8
      a6:	9c 04       	cpc	r9, r12
      a8:	80 04       	cpc	r8, r0
      aa:	44 05       	cpc	r20, r4
      ac:	5e 05       	cpc	r21, r14
      ae:	66 05       	cpc	r22, r6
      b0:	82 05       	cpc	r24, r2
      b2:	9e 05       	cpc	r25, r14
      b4:	ba 05       	cpc	r27, r10
      b6:	d6 05       	cpc	r29, r6
      b8:	f2 05       	cpc	r31, r2
      ba:	0d 06       	cpc	r0, r29
      bc:	28 06       	cpc	r2, r24

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d0 e1       	ldi	r29, 0x10	; 16
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ee e7       	ldi	r30, 0x7E	; 126
      d2:	f1 e1       	ldi	r31, 0x11	; 17
      d4:	00 e0       	ldi	r16, 0x00	; 0
      d6:	0b bf       	out	0x3b, r16	; 59
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
      da:	07 90       	elpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	ae 38       	cpi	r26, 0x8E	; 142
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	ae e8       	ldi	r26, 0x8E	; 142
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	ab 3c       	cpi	r26, 0xCB	; 203
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	c0 d7       	rcall	.+3968   	; 0x1076 <main>
      f6:	0c 94 bd 08 	jmp	0x117a	; 0x117a <_exit>

000000fa <__bad_interrupt>:
      fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <Port_Init>:
    }
}

void Port_Init(void)
{
    DDRE = 0xF0; // 7-세그먼트 선택 포트 출력 설정 (PE4 : FND0, PE5, FND1, PE6 : FND2, PE7 : FND3)
      fc:	80 ef       	ldi	r24, 0xF0	; 240
      fe:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; // 7-세그먼트 포트 출력 설정
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	87 bb       	out	0x17, r24	; 23
    DDRC = 0x0F; // PC0~3 : Output , PC4~7 : Input 설정
     104:	9f e0       	ldi	r25, 0x0F	; 15
     106:	94 bb       	out	0x14, r25	; 20
    DDRA = 0xFF; // LCD Data line 출력 설정 PA0~PA7
     108:	8a bb       	out	0x1a, r24	; 26
    DDRF = 0xFF; // 재고 LED 출력 설정
     10a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    DDRG = 0x17; // LCD Command line 출력 설정 PG0~PG2, Buzzer 출력 설정 PG4
     10e:	87 e1       	ldi	r24, 0x17	; 23
     110:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    DDRD = 0x00;
     114:	11 ba       	out	0x11, r1	; 17
     116:	08 95       	ret

00000118 <Timer1_Init>:

}

void Timer1_Init(void)
{
    TCCR1A = 0x00;
     118:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x0D; //CTC Mode , Prescale = 1024
     11a:	8d e0       	ldi	r24, 0x0D	; 13
     11c:	8e bd       	out	0x2e, r24	; 46
                   // 1 Tick당 0.069444[ms]
    OCR1A = 144;  // 144 Tick : 10[ms]
     11e:	80 e9       	ldi	r24, 0x90	; 144
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9b bd       	out	0x2b, r25	; 43
     124:	8a bd       	out	0x2a, r24	; 42
     126:	08 95       	ret

00000128 <Timer3_Init>:
}

void Timer3_Init(void)
{
    TCCR3A = 0x00;
     128:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    TCCR3B = 0x0A; //CTC Mode , Prescale = 8
     12c:	8a e0       	ldi	r24, 0x0A	; 10
     12e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
                   // 1 Tick당 0.54253472[us]
    OCR3A = 3517;  // 3517 Tick : 1908[us] -도-
     132:	8d eb       	ldi	r24, 0xBD	; 189
     134:	9d e0       	ldi	r25, 0x0D	; 13
     136:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     13a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     13e:	08 95       	ret

00000140 <ISR_Init>:
}

void ISR_Init(void)
{
    TIMSK = 0x10; //Timer1 Output Compare A Match Interrupt Enable
     140:	80 e1       	ldi	r24, 0x10	; 16
     142:	87 bf       	out	0x37, r24	; 55
    ETIMSK = 0x10; // Timer3 Output Compare A Match Interrupt Enable
     144:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    SREG = 0x80; //Global Interrupt Enable
     148:	80 e8       	ldi	r24, 0x80	; 128
     14a:	8f bf       	out	0x3f, r24	; 63
     14c:	08 95       	ret

0000014e <Key_Scan>:
}

void Key_Scan(void)
{   
    row++;
     14e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <row>
     152:	8f 5f       	subi	r24, 0xFF	; 255
     154:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
    if(row>=4)
     158:	84 30       	cpi	r24, 0x04	; 4
     15a:	10 f0       	brcs	.+4      	; 0x160 <Key_Scan+0x12>
    {
        row = 0;
     15c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <row>
    }

    switch(row)
     160:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <row>
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	49 f0       	breq	.+18     	; 0x17a <Key_Scan+0x2c>
     168:	28 f0       	brcs	.+10     	; 0x174 <Key_Scan+0x26>
     16a:	82 30       	cpi	r24, 0x02	; 2
     16c:	49 f0       	breq	.+18     	; 0x180 <Key_Scan+0x32>
     16e:	83 30       	cpi	r24, 0x03	; 3
     170:	51 f0       	breq	.+20     	; 0x186 <Key_Scan+0x38>
     172:	0b c0       	rjmp	.+22     	; 0x18a <Key_Scan+0x3c>
    {
        case 0 :
            PORTC = 0xFE; 
     174:	8e ef       	ldi	r24, 0xFE	; 254
     176:	85 bb       	out	0x15, r24	; 21
        break;
     178:	08 c0       	rjmp	.+16     	; 0x18a <Key_Scan+0x3c>
        case 1 :
            PORTC = 0xFD;
     17a:	8d ef       	ldi	r24, 0xFD	; 253
     17c:	85 bb       	out	0x15, r24	; 21
        break;
     17e:	05 c0       	rjmp	.+10     	; 0x18a <Key_Scan+0x3c>
        case 2 :
            PORTC = 0xFB;
     180:	8b ef       	ldi	r24, 0xFB	; 251
     182:	85 bb       	out	0x15, r24	; 21
        break;
     184:	02 c0       	rjmp	.+4      	; 0x18a <Key_Scan+0x3c>
        case 3 :
            PORTC = 0xF7;
     186:	87 ef       	ldi	r24, 0xF7	; 247
     188:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	83 e3       	ldi	r24, 0x33	; 51
     18c:	97 e0       	ldi	r25, 0x07	; 7
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <Key_Scan+0x40>
        default : 
        break;
    }
    _delay_us(500);

    column = (PINC & 0xF0)>>4;
     192:	83 b3       	in	r24, 0x13	; 19
     194:	82 95       	swap	r24
     196:	8f 70       	andi	r24, 0x0F	; 15
     198:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <column>

    if((row == 0) && (column != 0))
     19c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <row>
     1a0:	91 11       	cpse	r25, r1
     1a2:	1b c0       	rjmp	.+54     	; 0x1da <Key_Scan+0x8c>
     1a4:	88 23       	and	r24, r24
     1a6:	c9 f0       	breq	.+50     	; 0x1da <Key_Scan+0x8c>
    {
        if(column == 14)
     1a8:	8e 30       	cpi	r24, 0x0E	; 14
     1aa:	21 f4       	brne	.+8      	; 0x1b4 <Key_Scan+0x66>
        {
            Keypad_Num = '1';
     1ac:	81 e3       	ldi	r24, 0x31	; 49
     1ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1b2:	08 95       	ret
        }
        else if(column == 13)
     1b4:	8d 30       	cpi	r24, 0x0D	; 13
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <Key_Scan+0x72>
        {
            Keypad_Num = '2';
     1b8:	82 e3       	ldi	r24, 0x32	; 50
     1ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1be:	08 95       	ret
        }
        else if(column == 11)
     1c0:	8b 30       	cpi	r24, 0x0B	; 11
     1c2:	21 f4       	brne	.+8      	; 0x1cc <Key_Scan+0x7e>
        {
            Keypad_Num = '3';
     1c4:	83 e3       	ldi	r24, 0x33	; 51
     1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1ca:	08 95       	ret
        }
        else if(column == 7)
     1cc:	87 30       	cpi	r24, 0x07	; 7
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <Key_Scan+0x84>
     1d0:	57 c0       	rjmp	.+174    	; 0x280 <Key_Scan+0x132>
        {
            Keypad_Num = 'A';
     1d2:	81 e4       	ldi	r24, 0x41	; 65
     1d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1d8:	08 95       	ret
        }
    }
    else if((row == 1) && (column != 0))
     1da:	91 30       	cpi	r25, 0x01	; 1
     1dc:	d1 f4       	brne	.+52     	; 0x212 <Key_Scan+0xc4>
     1de:	88 23       	and	r24, r24
     1e0:	c1 f0       	breq	.+48     	; 0x212 <Key_Scan+0xc4>
    {
        if(column == 14)
     1e2:	8e 30       	cpi	r24, 0x0E	; 14
     1e4:	21 f4       	brne	.+8      	; 0x1ee <Key_Scan+0xa0>
        {
            Keypad_Num = '4';
     1e6:	84 e3       	ldi	r24, 0x34	; 52
     1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1ec:	08 95       	ret
        }
        else if(column == 13)
     1ee:	8d 30       	cpi	r24, 0x0D	; 13
     1f0:	21 f4       	brne	.+8      	; 0x1fa <Key_Scan+0xac>
        {
            Keypad_Num = '5';
     1f2:	85 e3       	ldi	r24, 0x35	; 53
     1f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1f8:	08 95       	ret
        }
        else if(column == 11)
     1fa:	8b 30       	cpi	r24, 0x0B	; 11
     1fc:	21 f4       	brne	.+8      	; 0x206 <Key_Scan+0xb8>
        {
            Keypad_Num = '6';           
     1fe:	86 e3       	ldi	r24, 0x36	; 54
     200:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     204:	08 95       	ret
        }
        else if(column == 7)
     206:	87 30       	cpi	r24, 0x07	; 7
     208:	d9 f5       	brne	.+118    	; 0x280 <Key_Scan+0x132>
        {
            Keypad_Num = 'B';
     20a:	82 e4       	ldi	r24, 0x42	; 66
     20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     210:	08 95       	ret
        }
    }
    else if((row == 2) && (column != 0))
     212:	92 30       	cpi	r25, 0x02	; 2
     214:	d1 f4       	brne	.+52     	; 0x24a <Key_Scan+0xfc>
     216:	88 23       	and	r24, r24
     218:	c1 f0       	breq	.+48     	; 0x24a <Key_Scan+0xfc>
    {
        if(column == 14)
     21a:	8e 30       	cpi	r24, 0x0E	; 14
     21c:	21 f4       	brne	.+8      	; 0x226 <Key_Scan+0xd8>
        {
            Keypad_Num = '7';
     21e:	87 e3       	ldi	r24, 0x37	; 55
     220:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     224:	08 95       	ret
        }
        else if(column == 13)
     226:	8d 30       	cpi	r24, 0x0D	; 13
     228:	21 f4       	brne	.+8      	; 0x232 <Key_Scan+0xe4>
        {
            Keypad_Num = '8';
     22a:	88 e3       	ldi	r24, 0x38	; 56
     22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     230:	08 95       	ret
        }
        else if(column == 11)
     232:	8b 30       	cpi	r24, 0x0B	; 11
     234:	21 f4       	brne	.+8      	; 0x23e <Key_Scan+0xf0>
        {
            Keypad_Num = '9';           
     236:	89 e3       	ldi	r24, 0x39	; 57
     238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     23c:	08 95       	ret
        }
        else if(column == 7)
     23e:	87 30       	cpi	r24, 0x07	; 7
     240:	f9 f4       	brne	.+62     	; 0x280 <Key_Scan+0x132>
        {
            Keypad_Num = 'C';
     242:	83 e4       	ldi	r24, 0x43	; 67
     244:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     248:	08 95       	ret
        }
    }
    else if((row == 3) && (column != 0))
     24a:	93 30       	cpi	r25, 0x03	; 3
     24c:	c9 f4       	brne	.+50     	; 0x280 <Key_Scan+0x132>
     24e:	88 23       	and	r24, r24
     250:	b9 f0       	breq	.+46     	; 0x280 <Key_Scan+0x132>
    {
        if(column == 14)
     252:	8e 30       	cpi	r24, 0x0E	; 14
     254:	21 f4       	brne	.+8      	; 0x25e <Key_Scan+0x110>
        {
            Keypad_Num = '*';
     256:	8a e2       	ldi	r24, 0x2A	; 42
     258:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     25c:	08 95       	ret
        }
        else if(column == 13)
     25e:	8d 30       	cpi	r24, 0x0D	; 13
     260:	21 f4       	brne	.+8      	; 0x26a <Key_Scan+0x11c>
        {
            Keypad_Num = '0';
     262:	80 e3       	ldi	r24, 0x30	; 48
     264:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     268:	08 95       	ret
        }
        else if(column == 11)
     26a:	8b 30       	cpi	r24, 0x0B	; 11
     26c:	21 f4       	brne	.+8      	; 0x276 <Key_Scan+0x128>
        {
            Keypad_Num = '#';           
     26e:	83 e2       	ldi	r24, 0x23	; 35
     270:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     274:	08 95       	ret
        }
        else if(column == 7)
     276:	87 30       	cpi	r24, 0x07	; 7
     278:	19 f4       	brne	.+6      	; 0x280 <Key_Scan+0x132>
        {
            Keypad_Num = 'D';
     27a:	84 e4       	ldi	r24, 0x44	; 68
     27c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     280:	08 95       	ret

00000282 <Switch_Scan>:
        }
    }
}

void Switch_Scan(void)
{
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
    uint8_t PD0_status,PD1_status,PD2_status,PD3_status;
    static uint8_t PD0_status_old,PD1_status_old,PD2_status_old,PD3_status_old;

    PD0_status = PIND & 0x01;
     28a:	80 b3       	in	r24, 0x10	; 16
    PD1_status = PIND & 0x02;
     28c:	c0 b3       	in	r28, 0x10	; 16
     28e:	c2 70       	andi	r28, 0x02	; 2
    PD2_status = PIND & 0x04;
     290:	f0 b3       	in	r31, 0x10	; 16
     292:	f4 70       	andi	r31, 0x04	; 4
    PD3_status = PIND & 0x08;
     294:	e0 b3       	in	r30, 0x10	; 16
     296:	e8 70       	andi	r30, 0x08	; 8

    if((PD0_status == 0x01)&&(PD0_status_old == 0))
     298:	d8 2f       	mov	r29, r24
     29a:	d1 70       	andi	r29, 0x01	; 1
     29c:	80 ff       	sbrs	r24, 0
     29e:	09 c0       	rjmp	.+18     	; 0x2b2 <Switch_Scan+0x30>
     2a0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PD0_status_old.2162>
     2a4:	81 11       	cpse	r24, r1
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <Switch_Scan+0x30>
    {
        Coin_100++;
     2a8:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Coin_100>
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <Coin_100>
    }
    if((PD1_status == 0x02)&&(PD1_status_old == 0))
     2b2:	c2 30       	cpi	r28, 0x02	; 2
     2b4:	49 f4       	brne	.+18     	; 0x2c8 <Switch_Scan+0x46>
     2b6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <PD1_status_old.2163>
     2ba:	81 11       	cpse	r24, r1
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <Switch_Scan+0x46>
    {
        Coin_500++;
     2be:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Coin_500>
     2c2:	8f 5f       	subi	r24, 0xFF	; 255
     2c4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Coin_500>
    }    
    if((PD2_status == 0x04)&&(PD2_status_old == 0))
     2c8:	f4 30       	cpi	r31, 0x04	; 4
     2ca:	49 f4       	brne	.+18     	; 0x2de <Switch_Scan+0x5c>
     2cc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <PD2_status_old.2164>
     2d0:	81 11       	cpse	r24, r1
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <Switch_Scan+0x5c>
    {
        Coin_1000++;
     2d4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Coin_1000>
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <Coin_1000>
    }    
    if((PD3_status == 0x08)&&(PD3_status_old == 0))
     2de:	e8 30       	cpi	r30, 0x08	; 8
     2e0:	49 f4       	brne	.+18     	; 0x2f4 <Switch_Scan+0x72>
     2e2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <PD3_status_old.2165>
     2e6:	81 11       	cpse	r24, r1
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <Switch_Scan+0x72>
    {
        Coin_5000++;
     2ea:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Coin_5000>
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Coin_5000>
    }

    Coin_Total = Coin_100 * 100 + Coin_500 * 500 + Coin_1000 * 1000 + Coin_5000 * 5000;
     2f4:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Coin_100>
     2f8:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Coin_500>
     2fc:	24 ef       	ldi	r18, 0xF4	; 244
     2fe:	31 e0       	ldi	r19, 0x01	; 1
     300:	92 9f       	mul	r25, r18
     302:	a0 01       	movw	r20, r0
     304:	93 9f       	mul	r25, r19
     306:	50 0d       	add	r21, r0
     308:	11 24       	eor	r1, r1
     30a:	24 e6       	ldi	r18, 0x64	; 100
     30c:	82 9f       	mul	r24, r18
     30e:	40 0d       	add	r20, r0
     310:	51 1d       	adc	r21, r1
     312:	11 24       	eor	r1, r1
     314:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <Coin_1000>
     318:	28 ee       	ldi	r18, 0xE8	; 232
     31a:	33 e0       	ldi	r19, 0x03	; 3
     31c:	62 9f       	mul	r22, r18
     31e:	c0 01       	movw	r24, r0
     320:	63 9f       	mul	r22, r19
     322:	90 0d       	add	r25, r0
     324:	11 24       	eor	r1, r1
     326:	48 0f       	add	r20, r24
     328:	59 1f       	adc	r21, r25
     32a:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <Coin_5000>
     32e:	88 e8       	ldi	r24, 0x88	; 136
     330:	93 e1       	ldi	r25, 0x13	; 19
     332:	68 9f       	mul	r22, r24
     334:	90 01       	movw	r18, r0
     336:	69 9f       	mul	r22, r25
     338:	30 0d       	add	r19, r0
     33a:	11 24       	eor	r1, r1
     33c:	42 0f       	add	r20, r18
     33e:	53 1f       	adc	r21, r19
     340:	50 93 99 01 	sts	0x0199, r21	; 0x800199 <Coin_Total+0x1>
     344:	40 93 98 01 	sts	0x0198, r20	; 0x800198 <Coin_Total>

    if((Vending_Machine_status == VENDING_MACHINE_ITEM_SELECTED)||(Vending_Machine_status == VENDING_MACHINE_MONEY_FINISH))
     348:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <Vending_Machine_status>
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	19 f0       	breq	.+6      	; 0x356 <Switch_Scan+0xd4>
     350:	85 30       	cpi	r24, 0x05	; 5
     352:	09 f0       	breq	.+2      	; 0x356 <Switch_Scan+0xd4>
     354:	90 c0       	rjmp	.+288    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
    {
        Coin_n1 = Coin_Inserted % 10;//첫번째 자리 취득 
     356:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <Coin_Inserted>
     35a:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <Coin_Inserted+0x1>
     35e:	9a 01       	movw	r18, r20
     360:	ad ec       	ldi	r26, 0xCD	; 205
     362:	bc ec       	ldi	r27, 0xCC	; 204
     364:	fb d6       	rcall	.+3574   	; 0x115c <__umulhisi3>
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	9c 01       	movw	r18, r24
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	82 0f       	add	r24, r18
     386:	93 1f       	adc	r25, r19
     388:	9a 01       	movw	r18, r20
     38a:	28 1b       	sub	r18, r24
     38c:	39 0b       	sbc	r19, r25
     38e:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <Coin_n1>
        Coin_n10 = (Coin_Inserted / 10) % 10; //두번째 자리 취득 
     392:	9a 01       	movw	r18, r20
     394:	e3 d6       	rcall	.+3526   	; 0x115c <__umulhisi3>
     396:	8c 01       	movw	r16, r24
     398:	16 95       	lsr	r17
     39a:	07 95       	ror	r16
     39c:	16 95       	lsr	r17
     39e:	07 95       	ror	r16
     3a0:	16 95       	lsr	r17
     3a2:	07 95       	ror	r16
     3a4:	98 01       	movw	r18, r16
     3a6:	da d6       	rcall	.+3508   	; 0x115c <__umulhisi3>
     3a8:	96 95       	lsr	r25
     3aa:	87 95       	ror	r24
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	9c 01       	movw	r18, r24
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	98 01       	movw	r18, r16
     3cc:	28 1b       	sub	r18, r24
     3ce:	39 0b       	sbc	r19, r25
     3d0:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <Coin_n10>
        Coin_n100 = (Coin_Inserted / 100) % 10; //세번째 자리 취득 
     3d4:	9a 01       	movw	r18, r20
     3d6:	36 95       	lsr	r19
     3d8:	27 95       	ror	r18
     3da:	36 95       	lsr	r19
     3dc:	27 95       	ror	r18
     3de:	ab e7       	ldi	r26, 0x7B	; 123
     3e0:	b4 e1       	ldi	r27, 0x14	; 20
     3e2:	bc d6       	rcall	.+3448   	; 0x115c <__umulhisi3>
     3e4:	8c 01       	movw	r16, r24
     3e6:	16 95       	lsr	r17
     3e8:	07 95       	ror	r16
     3ea:	98 01       	movw	r18, r16
     3ec:	ad ec       	ldi	r26, 0xCD	; 205
     3ee:	bc ec       	ldi	r27, 0xCC	; 204
     3f0:	b5 d6       	rcall	.+3434   	; 0x115c <__umulhisi3>
     3f2:	96 95       	lsr	r25
     3f4:	87 95       	ror	r24
     3f6:	96 95       	lsr	r25
     3f8:	87 95       	ror	r24
     3fa:	96 95       	lsr	r25
     3fc:	87 95       	ror	r24
     3fe:	9c 01       	movw	r18, r24
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	98 01       	movw	r18, r16
     416:	28 1b       	sub	r18, r24
     418:	39 0b       	sbc	r19, r25
     41a:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <Coin_n100>
        Coin_n1000 = (Coin_Inserted / 1000) % 10; //네번째 자리 취득 
     41e:	9a 01       	movw	r18, r20
     420:	36 95       	lsr	r19
     422:	27 95       	ror	r18
     424:	36 95       	lsr	r19
     426:	27 95       	ror	r18
     428:	36 95       	lsr	r19
     42a:	27 95       	ror	r18
     42c:	a5 ec       	ldi	r26, 0xC5	; 197
     42e:	b0 e2       	ldi	r27, 0x20	; 32
     430:	95 d6       	rcall	.+3370   	; 0x115c <__umulhisi3>
     432:	ac 01       	movw	r20, r24
     434:	52 95       	swap	r21
     436:	42 95       	swap	r20
     438:	4f 70       	andi	r20, 0x0F	; 15
     43a:	45 27       	eor	r20, r21
     43c:	5f 70       	andi	r21, 0x0F	; 15
     43e:	45 27       	eor	r20, r21
     440:	9a 01       	movw	r18, r20
     442:	ad ec       	ldi	r26, 0xCD	; 205
     444:	bc ec       	ldi	r27, 0xCC	; 204
     446:	8a d6       	rcall	.+3348   	; 0x115c <__umulhisi3>
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	9c 01       	movw	r18, r24
     456:	22 0f       	add	r18, r18
     458:	33 1f       	adc	r19, r19
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	9a 01       	movw	r18, r20
     46c:	28 1b       	sub	r18, r24
     46e:	39 0b       	sbc	r19, r25
     470:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <Coin_n1000>
    }
    else
    {
        Coin_n1 = Coin_Total % 10;//첫번째 자리 취득 
     474:	8b c0       	rjmp	.+278    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     476:	9a 01       	movw	r18, r20
     478:	ad ec       	ldi	r26, 0xCD	; 205
     47a:	bc ec       	ldi	r27, 0xCC	; 204
     47c:	6f d6       	rcall	.+3294   	; 0x115c <__umulhisi3>
     47e:	96 95       	lsr	r25
     480:	87 95       	ror	r24
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	9c 01       	movw	r18, r24
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	82 0f       	add	r24, r18
     49e:	93 1f       	adc	r25, r19
     4a0:	9a 01       	movw	r18, r20
     4a2:	28 1b       	sub	r18, r24
     4a4:	39 0b       	sbc	r19, r25
     4a6:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <Coin_n1>
        Coin_n10 = (Coin_Total / 10) % 10; //두번째 자리 취득 
     4aa:	9a 01       	movw	r18, r20
     4ac:	57 d6       	rcall	.+3246   	; 0x115c <__umulhisi3>
     4ae:	8c 01       	movw	r16, r24
     4b0:	16 95       	lsr	r17
     4b2:	07 95       	ror	r16
     4b4:	16 95       	lsr	r17
     4b6:	07 95       	ror	r16
     4b8:	16 95       	lsr	r17
     4ba:	07 95       	ror	r16
     4bc:	98 01       	movw	r18, r16
     4be:	4e d6       	rcall	.+3228   	; 0x115c <__umulhisi3>
     4c0:	96 95       	lsr	r25
     4c2:	87 95       	ror	r24
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	96 95       	lsr	r25
     4ca:	87 95       	ror	r24
     4cc:	9c 01       	movw	r18, r24
     4ce:	22 0f       	add	r18, r18
     4d0:	33 1f       	adc	r19, r19
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	82 0f       	add	r24, r18
     4e0:	93 1f       	adc	r25, r19
     4e2:	98 01       	movw	r18, r16
     4e4:	28 1b       	sub	r18, r24
     4e6:	39 0b       	sbc	r19, r25
     4e8:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <Coin_n10>
        Coin_n100 = (Coin_Total / 100) % 10; //세번째 자리 취득 
     4ec:	9a 01       	movw	r18, r20
     4ee:	36 95       	lsr	r19
     4f0:	27 95       	ror	r18
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18
     4f6:	ab e7       	ldi	r26, 0x7B	; 123
     4f8:	b4 e1       	ldi	r27, 0x14	; 20
     4fa:	30 d6       	rcall	.+3168   	; 0x115c <__umulhisi3>
     4fc:	8c 01       	movw	r16, r24
     4fe:	16 95       	lsr	r17
     500:	07 95       	ror	r16
     502:	98 01       	movw	r18, r16
     504:	ad ec       	ldi	r26, 0xCD	; 205
     506:	bc ec       	ldi	r27, 0xCC	; 204
     508:	29 d6       	rcall	.+3154   	; 0x115c <__umulhisi3>
     50a:	96 95       	lsr	r25
     50c:	87 95       	ror	r24
     50e:	96 95       	lsr	r25
     510:	87 95       	ror	r24
     512:	96 95       	lsr	r25
     514:	87 95       	ror	r24
     516:	9c 01       	movw	r18, r24
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	98 01       	movw	r18, r16
     52e:	28 1b       	sub	r18, r24
     530:	39 0b       	sbc	r19, r25
     532:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <Coin_n100>
        Coin_n1000 = (Coin_Total / 1000) % 10; //네번째 자리 취득 
     536:	9a 01       	movw	r18, r20
     538:	36 95       	lsr	r19
     53a:	27 95       	ror	r18
     53c:	36 95       	lsr	r19
     53e:	27 95       	ror	r18
     540:	36 95       	lsr	r19
     542:	27 95       	ror	r18
     544:	a5 ec       	ldi	r26, 0xC5	; 197
     546:	b0 e2       	ldi	r27, 0x20	; 32
     548:	09 d6       	rcall	.+3090   	; 0x115c <__umulhisi3>
     54a:	ac 01       	movw	r20, r24
     54c:	52 95       	swap	r21
     54e:	42 95       	swap	r20
     550:	4f 70       	andi	r20, 0x0F	; 15
     552:	45 27       	eor	r20, r21
     554:	5f 70       	andi	r21, 0x0F	; 15
     556:	45 27       	eor	r20, r21
     558:	9a 01       	movw	r18, r20
     55a:	ad ec       	ldi	r26, 0xCD	; 205
     55c:	bc ec       	ldi	r27, 0xCC	; 204
     55e:	fe d5       	rcall	.+3068   	; 0x115c <__umulhisi3>
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	96 95       	lsr	r25
     566:	87 95       	ror	r24
     568:	96 95       	lsr	r25
     56a:	87 95       	ror	r24
     56c:	9c 01       	movw	r18, r24
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	9a 01       	movw	r18, r20
     584:	28 1b       	sub	r18, r24
     586:	39 0b       	sbc	r19, r25
     588:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <Coin_n1000>
    }

    PD0_status_old = PD0_status;
     58c:	d0 93 95 01 	sts	0x0195, r29	; 0x800195 <PD0_status_old.2162>
    PD1_status_old = PD1_status;
     590:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <PD1_status_old.2163>
    PD2_status_old = PD2_status;
     594:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <PD2_status_old.2164>
    PD3_status_old = PD3_status;
     598:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <PD3_status_old.2165>
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <Vending_Machine_Mode>:

void Vending_Machine_Mode(void)
{
    static uint16_t Coin_Total_Old;
    switch(Vending_Machine_status)
     5a6:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <Vending_Machine_status>
     5aa:	8e 2f       	mov	r24, r30
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	87 30       	cpi	r24, 0x07	; 7
     5b0:	91 05       	cpc	r25, r1
     5b2:	08 f0       	brcs	.+2      	; 0x5b6 <Vending_Machine_Mode+0x10>
     5b4:	ab c0       	rjmp	.+342    	; 0x70c <Vending_Machine_Mode+0x166>
     5b6:	fc 01       	movw	r30, r24
     5b8:	ea 5b       	subi	r30, 0xBA	; 186
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
     5bc:	c6 c5       	rjmp	.+2956   	; 0x114a <__tablejump2__>
    {
        case VENDING_MACHINE_IDLE :
            if(Coin_Total > 0)
     5be:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Coin_Total>
     5c2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <Coin_Total+0x1>
     5c6:	89 2b       	or	r24, r25
     5c8:	09 f4       	brne	.+2      	; 0x5cc <Vending_Machine_Mode+0x26>
     5ca:	a0 c0       	rjmp	.+320    	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_INSERT_COIN; //코인 입력이 들어왔을 경우 Insert Coin 모드로 변경
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     5d2:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_INSERT_COIN :
            if((Keypad_Num > '0')&&(Keypad_Num < '9'))
     5d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     5d8:	9f ec       	ldi	r25, 0xCF	; 207
     5da:	98 0f       	add	r25, r24
     5dc:	98 30       	cpi	r25, 0x08	; 8
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <Vending_Machine_Mode+0x3c>
     5e0:	95 c0       	rjmp	.+298    	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Selected_Num = Keypad_Num - 0x30; // ASCII -> 숫자로 변환
     5e2:	80 53       	subi	r24, 0x30	; 48
     5e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Selected_Num>
                Vending_Machine_status = VENDING_MACHINE_SELECT_ITEM; //'0~8' 키패드 버튼이 들어왔을 경우, Select Item 모드로 변경
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
                Coin_Inserted = Coin_Total;
     5ee:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Coin_Total>
     5f2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <Coin_Total+0x1>
     5f6:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Coin_Inserted+0x1>
     5fa:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Coin_Inserted>
     5fe:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_SELECT_ITEM : 
            if(Keypad_Num == 'A')
     600:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     604:	81 34       	cpi	r24, 0x41	; 65
     606:	21 f4       	brne	.+8      	; 0x610 <Vending_Machine_Mode+0x6a>
            {
                Vending_Machine_status = VENDING_MACHINE_ITEM_SELECTED; //'A' 키패드 버튼이 들어왔을 경우, Select Item 모드로 변경
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     60e:	08 95       	ret
            }
            else if(Keypad_Num == 'D')
     610:	84 34       	cpi	r24, 0x44	; 68
     612:	09 f0       	breq	.+2      	; 0x616 <Vending_Machine_Mode+0x70>
     614:	7b c0       	rjmp	.+246    	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     616:	86 e0       	ldi	r24, 0x06	; 6
     618:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     61c:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_ITEM_SELECTED :
            if((Coin_Inserted < Vending_Machine_Price[Selected_Num - 1])&&(Melody_status == MELODY_STATUS_FINISHED)&&(Selected_item_flag==1))
     61e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <Selected_Num>
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ef 5e       	subi	r30, 0xEF	; 239
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	20 81       	ld	r18, Z
     630:	31 81       	ldd	r19, Z+1	; 0x01
     632:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Coin_Inserted>
     636:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Coin_Inserted+0x1>
     63a:	82 17       	cp	r24, r18
     63c:	93 07       	cpc	r25, r19
     63e:	60 f4       	brcc	.+24     	; 0x658 <Vending_Machine_Mode+0xb2>
     640:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <Melody_status>
     644:	48 30       	cpi	r20, 0x08	; 8
     646:	41 f4       	brne	.+16     	; 0x658 <Vending_Machine_Mode+0xb2>
     648:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     64c:	41 30       	cpi	r20, 0x01	; 1
     64e:	21 f4       	brne	.+8      	; 0x658 <Vending_Machine_Mode+0xb2>
            {
                Vending_Machine_status = VENDING_MACHINE_MONEY_ERROR;
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     656:	08 95       	ret
            }            
            else if(Keypad_Num == 'D')
     658:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Keypad_Num>
     65c:	44 34       	cpi	r20, 0x44	; 68
     65e:	21 f4       	brne	.+8      	; 0x668 <Vending_Machine_Mode+0xc2>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     660:	86 e0       	ldi	r24, 0x06	; 6
     662:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     666:	08 95       	ret
            }
            else
            {
                if(Selected_item_flag == 1)
     668:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     66c:	41 30       	cpi	r20, 0x01	; 1
     66e:	41 f4       	brne	.+16     	; 0x680 <Vending_Machine_Mode+0xda>
                {
                    Coin_Inserted = Coin_Inserted - Vending_Machine_Price[Selected_Num - 1];
     670:	82 1b       	sub	r24, r18
     672:	93 0b       	sbc	r25, r19
     674:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Coin_Inserted+0x1>
     678:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Coin_Inserted>
                    Selected_item_flag = 0;
     67c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                }

                if((Coin_Inserted == 0)&&(Melody_status == MELODY_STATUS_FINISHED))
     680:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Coin_Inserted>
     684:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Coin_Inserted+0x1>
     688:	89 2b       	or	r24, r25
     68a:	09 f0       	breq	.+2      	; 0x68e <Vending_Machine_Mode+0xe8>
     68c:	3f c0       	rjmp	.+126    	; 0x70c <Vending_Machine_Mode+0x166>
     68e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
     692:	88 30       	cpi	r24, 0x08	; 8
     694:	d9 f5       	brne	.+118    	; 0x70c <Vending_Machine_Mode+0x166>
                {
                    Vending_Machine_status = VENDING_MACHINE_MONEY_FINISH;
     696:	85 e0       	ldi	r24, 0x05	; 5
     698:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     69c:	08 95       	ret
                }
            }
        break;
        case VENDING_MACHINE_MONEY_ERROR :
            if(Keypad_Num == 'D')
     69e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     6a2:	84 34       	cpi	r24, 0x44	; 68
     6a4:	99 f5       	brne	.+102    	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <Vending_Machine_status>
     6ac:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_MONEY_FINISH :
            /* 멜로디 출력 이후 초기 모드로 복귀 */
            if(Melody_status == MELODY_STATUS_FINISHED)
     6ae:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
     6b2:	88 30       	cpi	r24, 0x08	; 8
     6b4:	59 f5       	brne	.+86     	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_IDLE;
     6b6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <Vending_Machine_status>
                Melody_status = MELODY_STATUS_START;
     6ba:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Melody_status>
                Selected_item_flag = 1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                Coin_Total = 0;
     6c4:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <Coin_Total+0x1>
     6c8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <Coin_Total>
                Coin_100 = 0;
     6cc:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <Coin_100>
                Coin_500 = 0;
     6d0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Coin_500>
                Coin_1000 = 0; 
     6d4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Coin_1000>
                Coin_5000 = 0;;
     6d8:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <Coin_5000>
     6dc:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_CANCEL :
            /* 멜로디 출력 이후 초기 모드로 복귀 */
            if(Melody_status == MELODY_STATUS_FINISHED)
     6de:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
     6e2:	88 30       	cpi	r24, 0x08	; 8
     6e4:	99 f4       	brne	.+38     	; 0x70c <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_IDLE;
     6e6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <Vending_Machine_status>
                Melody_status = MELODY_STATUS_START;
     6ea:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Melody_status>
                Selected_item_flag = 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                Coin_Total = 0;
     6f4:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <Coin_Total+0x1>
     6f8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <Coin_Total>
                Coin_100 = 0;
     6fc:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <Coin_100>
                Coin_500 = 0;
     700:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Coin_500>
                Coin_1000 = 0; 
     704:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Coin_1000>
                Coin_5000 = 0;;
     708:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <Coin_5000>
     70c:	08 95       	ret

0000070e <Melody_Update>:

}

void Melody_Update(void)
{
    switch(Vending_Machine_status)
     70e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <Vending_Machine_status>
     712:	84 30       	cpi	r24, 0x04	; 4
     714:	09 f4       	brne	.+2      	; 0x718 <Melody_Update+0xa>
     716:	84 c0       	rjmp	.+264    	; 0x820 <Melody_Update+0x112>
     718:	18 f4       	brcc	.+6      	; 0x720 <Melody_Update+0x12>
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	41 f0       	breq	.+16     	; 0x72e <Melody_Update+0x20>
     71e:	a6 c2       	rjmp	.+1356   	; 0xc6c <Melody_Update+0x55e>
     720:	85 30       	cpi	r24, 0x05	; 5
     722:	09 f4       	brne	.+2      	; 0x726 <Melody_Update+0x18>
     724:	d9 c0       	rjmp	.+434    	; 0x8d8 <Melody_Update+0x1ca>
     726:	86 30       	cpi	r24, 0x06	; 6
     728:	09 f4       	brne	.+2      	; 0x72c <Melody_Update+0x1e>
     72a:	bc c1       	rjmp	.+888    	; 0xaa4 <Melody_Update+0x396>
     72c:	9f c2       	rjmp	.+1342   	; 0xc6c <Melody_Update+0x55e>
    {
        case VENDING_MACHINE_ITEM_SELECTED :
            switch(Melody_status)
     72e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	89 f1       	breq	.+98     	; 0x798 <Melody_Update+0x8a>
     736:	28 f4       	brcc	.+10     	; 0x742 <Melody_Update+0x34>
     738:	88 23       	and	r24, r24
     73a:	51 f0       	breq	.+20     	; 0x750 <Melody_Update+0x42>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	81 f0       	breq	.+32     	; 0x760 <Melody_Update+0x52>
     740:	69 c0       	rjmp	.+210    	; 0x814 <Melody_Update+0x106>
     742:	85 30       	cpi	r24, 0x05	; 5
     744:	09 f4       	brne	.+2      	; 0x748 <Melody_Update+0x3a>
     746:	44 c0       	rjmp	.+136    	; 0x7d0 <Melody_Update+0xc2>
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	09 f4       	brne	.+2      	; 0x74e <Melody_Update+0x40>
     74c:	5d c0       	rjmp	.+186    	; 0x808 <Melody_Update+0xfa>
     74e:	62 c0       	rjmp	.+196    	; 0x814 <Melody_Update+0x106>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_DO;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
                    Melody_timer = 0;
     756:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     75a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                break;
     75e:	08 95       	ret
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     760:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     764:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     768:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     76c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     770:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     774:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     77e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     782:	c2 97       	sbiw	r24, 0x32	; 50
     784:	08 f4       	brcc	.+2      	; 0x788 <Melody_Update+0x7a>
     786:	77 c2       	rjmp	.+1262   	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     788:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     78c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     796:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     798:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     79c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     7a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     7a8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     7ac:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     7b6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     7ba:	c2 97       	sbiw	r24, 0x32	; 50
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <Melody_Update+0xb2>
     7be:	5b c2       	rjmp	.+1206   	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     7c0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     7c4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     7c8:	85 e0       	ldi	r24, 0x05	; 5
     7ca:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     7ce:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     7d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     7d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     7d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     7e0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     7e4:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     7ee:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     7f2:	c2 97       	sbiw	r24, 0x32	; 50
     7f4:	08 f4       	brcc	.+2      	; 0x7f8 <Melody_Update+0xea>
     7f6:	3f c2       	rjmp	.+1150   	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     7f8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     7fc:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     800:	88 e0       	ldi	r24, 0x08	; 8
     802:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     806:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    //Melody_status = MELODY_STATUS_START;
                    cbi(PORTG,4); // PG4 출력 차단
     808:	e5 e6       	ldi	r30, 0x65	; 101
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	8f 7e       	andi	r24, 0xEF	; 239
     810:	80 83       	st	Z, r24
                break;
     812:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     814:	e5 e6       	ldi	r30, 0x65	; 101
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	8f 7e       	andi	r24, 0xEF	; 239
     81c:	80 83       	st	Z, r24
                break;
     81e:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_MONEY_ERROR :
            switch(Melody_status)
     820:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	91 f0       	breq	.+36     	; 0x84c <Melody_Update+0x13e>
     828:	18 f4       	brcc	.+6      	; 0x830 <Melody_Update+0x122>
     82a:	88 23       	and	r24, r24
     82c:	39 f0       	breq	.+14     	; 0x83c <Melody_Update+0x12e>
     82e:	4e c0       	rjmp	.+156    	; 0x8cc <Melody_Update+0x1be>
     830:	87 30       	cpi	r24, 0x07	; 7
     832:	41 f1       	breq	.+80     	; 0x884 <Melody_Update+0x176>
     834:	88 30       	cpi	r24, 0x08	; 8
     836:	09 f4       	brne	.+2      	; 0x83a <Melody_Update+0x12c>
     838:	41 c0       	rjmp	.+130    	; 0x8bc <Melody_Update+0x1ae>
     83a:	48 c0       	rjmp	.+144    	; 0x8cc <Melody_Update+0x1be>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_MI;
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
                    Melody_timer = 0;
     842:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     846:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                break;
     84a:	08 95       	ret
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     84c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     850:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     854:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     858:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     85c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     860:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     86a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     86e:	c2 97       	sbiw	r24, 0x32	; 50
     870:	08 f4       	brcc	.+2      	; 0x874 <Melody_Update+0x166>
     872:	01 c2       	rjmp	.+1026   	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     874:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     878:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_SI;
     87c:	87 e0       	ldi	r24, 0x07	; 7
     87e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     882:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     884:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     888:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     88c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     890:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     894:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     898:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     8a2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     8a6:	c2 97       	sbiw	r24, 0x32	; 50
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <Melody_Update+0x19e>
     8aa:	e5 c1       	rjmp	.+970    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     8ac:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     8b0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     8b4:	88 e0       	ldi	r24, 0x08	; 8
     8b6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     8ba:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     8bc:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     8c0:	e5 e6       	ldi	r30, 0x65	; 101
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	8f 7e       	andi	r24, 0xEF	; 239
     8c8:	80 83       	st	Z, r24
                break;
     8ca:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     8cc:	e5 e6       	ldi	r30, 0x65	; 101
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	8f 7e       	andi	r24, 0xEF	; 239
     8d4:	80 83       	st	Z, r24
                break;
     8d6:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_MONEY_FINISH :
            switch(Melody_status)
     8d8:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <Melody_status>
     8dc:	8e 2f       	mov	r24, r30
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	89 30       	cpi	r24, 0x09	; 9
     8e2:	91 05       	cpc	r25, r1
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <Melody_Update+0x1da>
     8e6:	d8 c0       	rjmp	.+432    	; 0xa98 <Melody_Update+0x38a>
     8e8:	fc 01       	movw	r30, r24
     8ea:	e3 5b       	subi	r30, 0xB3	; 179
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	2d c4       	rjmp	.+2138   	; 0x114a <__tablejump2__>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_SI;
     8f0:	87 e0       	ldi	r24, 0x07	; 7
     8f2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
                    Melody_timer = 0;
     8f6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     8fa:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                break;
     8fe:	08 95       	ret
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     900:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     904:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     908:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     90c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     910:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     914:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     91e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     922:	c2 97       	sbiw	r24, 0x32	; 50
     924:	08 f4       	brcc	.+2      	; 0x928 <Melody_Update+0x21a>
     926:	a7 c1       	rjmp	.+846    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     928:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     92c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_LA;
     930:	86 e0       	ldi	r24, 0x06	; 6
     932:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     936:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_LA:
                    OCR3A = Melody_value[MELODY_STATUS_LA-1];
     938:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Melody_value+0xa>
     93c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Melody_value+0xb>
     940:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     944:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     948:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     94c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     956:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     95a:	c2 97       	sbiw	r24, 0x32	; 50
     95c:	08 f4       	brcc	.+2      	; 0x960 <Melody_Update+0x252>
     95e:	8b c1       	rjmp	.+790    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     960:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     964:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     96e:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     970:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     974:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     978:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     97c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     980:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     984:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     98e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     992:	c2 97       	sbiw	r24, 0x32	; 50
     994:	08 f4       	brcc	.+2      	; 0x998 <Melody_Update+0x28a>
     996:	6f c1       	rjmp	.+734    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     998:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     99c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FA;
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     9a6:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FA:
                    OCR3A = Melody_value[MELODY_STATUS_FA-1];
     9a8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Melody_value+0x6>
     9ac:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Melody_value+0x7>
     9b0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9b4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     9b8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     9bc:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     9c6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     9ca:	c2 97       	sbiw	r24, 0x32	; 50
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <Melody_Update+0x2c2>
     9ce:	53 c1       	rjmp	.+678    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     9d0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     9d4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     9de:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     9e0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     9e4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     9e8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     9f0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     9f4:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     9fe:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     a02:	c2 97       	sbiw	r24, 0x32	; 50
     a04:	08 f4       	brcc	.+2      	; 0xa08 <Melody_Update+0x2fa>
     a06:	37 c1       	rjmp	.+622    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     a08:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     a0c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_RE;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     a16:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_RE:
                    OCR3A = Melody_value[MELODY_STATUS_RE-1];
     a18:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Melody_value+0x2>
     a1c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Melody_value+0x3>
     a20:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a24:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     a28:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     a2c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     a36:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     a3a:	c2 97       	sbiw	r24, 0x32	; 50
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <Melody_Update+0x332>
     a3e:	1b c1       	rjmp	.+566    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     a40:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     a44:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_DO;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     a4e:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     a50:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     a54:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     a58:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a5c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     a60:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     a64:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     a6e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     a72:	c2 97       	sbiw	r24, 0x32	; 50
     a74:	08 f4       	brcc	.+2      	; 0xa78 <Melody_Update+0x36a>
     a76:	ff c0       	rjmp	.+510    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     a78:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     a7c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     a86:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     a88:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     a8c:	e5 e6       	ldi	r30, 0x65	; 101
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8f 7e       	andi	r24, 0xEF	; 239
     a94:	80 83       	st	Z, r24
                break;
     a96:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     a98:	e5 e6       	ldi	r30, 0x65	; 101
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	8f 7e       	andi	r24, 0xEF	; 239
     aa0:	80 83       	st	Z, r24
                break;
     aa2:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_CANCEL :
            switch(Melody_status)
     aa4:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <Melody_status>
     aa8:	8e 2f       	mov	r24, r30
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	89 30       	cpi	r24, 0x09	; 9
     aae:	91 05       	cpc	r25, r1
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <Melody_Update+0x3a6>
     ab2:	d6 c0       	rjmp	.+428    	; 0xc60 <Melody_Update+0x552>
     ab4:	fc 01       	movw	r30, r24
     ab6:	ea 5a       	subi	r30, 0xAA	; 170
     ab8:	ff 4f       	sbci	r31, 0xFF	; 255
     aba:	47 c3       	rjmp	.+1678   	; 0x114a <__tablejump2__>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_DO;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
                    Melody_timer = 0;
     ac2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     ac6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                break;
     aca:	08 95       	ret
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     acc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     ad0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     ad4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ad8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     adc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     ae0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     aea:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     aee:	c2 97       	sbiw	r24, 0x32	; 50
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <Melody_Update+0x3e6>
     af2:	c1 c0       	rjmp	.+386    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     af4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     af8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_RE;
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     b02:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_RE:
                    OCR3A = Melody_value[MELODY_STATUS_RE-1];
     b04:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Melody_value+0x2>
     b08:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Melody_value+0x3>
     b0c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b10:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b14:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     b18:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     b22:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     b26:	c2 97       	sbiw	r24, 0x32	; 50
     b28:	08 f4       	brcc	.+2      	; 0xb2c <Melody_Update+0x41e>
     b2a:	a5 c0       	rjmp	.+330    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b2c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     b30:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     b3a:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     b3c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     b40:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     b44:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b48:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b4c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     b50:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     b5a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     b5e:	c2 97       	sbiw	r24, 0x32	; 50
     b60:	08 f4       	brcc	.+2      	; 0xb64 <Melody_Update+0x456>
     b62:	89 c0       	rjmp	.+274    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b64:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     b68:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FA;
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     b72:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FA:
                    OCR3A = Melody_value[MELODY_STATUS_FA-1];
     b74:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Melody_value+0x6>
     b78:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Melody_value+0x7>
     b7c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b80:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b84:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     b88:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     b92:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     b96:	c2 97       	sbiw	r24, 0x32	; 50
     b98:	08 f4       	brcc	.+2      	; 0xb9c <Melody_Update+0x48e>
     b9a:	6d c0       	rjmp	.+218    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b9c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     ba0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     ba4:	85 e0       	ldi	r24, 0x05	; 5
     ba6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     baa:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     bac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     bb0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     bb4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     bb8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     bbc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     bc0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     bca:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     bce:	c2 97       	sbiw	r24, 0x32	; 50
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <Melody_Update+0x4c6>
     bd2:	51 c0       	rjmp	.+162    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     bd4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     bd8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_LA;
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     be2:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_LA:
                    OCR3A = Melody_value[MELODY_STATUS_LA-1];
     be4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Melody_value+0xa>
     be8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Melody_value+0xb>
     bec:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     bf0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     bf4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     bf8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     c02:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     c06:	c2 97       	sbiw	r24, 0x32	; 50
     c08:	b0 f1       	brcs	.+108    	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     c0a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     c0e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_SI;
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     c18:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     c1a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     c1e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     c22:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     c26:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     c2a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Melody_timer>
     c2e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <Melody_timer+0x1>
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <Melody_timer+0x1>
     c38:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Melody_timer>
                    if(Melody_timer>=50)
     c3c:	c2 97       	sbiw	r24, 0x32	; 50
     c3e:	d8 f0       	brcs	.+54     	; 0xc76 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     c40:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Melody_timer+0x1>
     c44:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Melody_status>
     c4e:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     c50:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     c54:	e5 e6       	ldi	r30, 0x65	; 101
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8f 7e       	andi	r24, 0xEF	; 239
     c5c:	80 83       	st	Z, r24
                break;
     c5e:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     c60:	e5 e6       	ldi	r30, 0x65	; 101
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8f 7e       	andi	r24, 0xEF	; 239
     c68:	80 83       	st	Z, r24
                break;
     c6a:	08 95       	ret
            }
        break;
        default :
            cbi(PORTG,4); // PG4 출력 차단
     c6c:	e5 e6       	ldi	r30, 0x65	; 101
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 7e       	andi	r24, 0xEF	; 239
     c74:	80 83       	st	Z, r24
     c76:	08 95       	ret

00000c78 <Clear_Tx_Buffer>:
    }
}

void Clear_Tx_Buffer(void)
{
    for(uint8_t i = 0;i<32;i++)
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <Clear_Tx_Buffer+0x12>
    {
        LCD_Tx_Data[i] = ' ';
     c7c:	e8 2f       	mov	r30, r24
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	e0 56       	subi	r30, 0x60	; 96
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	90 e2       	ldi	r25, 0x20	; 32
     c86:	90 83       	st	Z, r25
    }
}

void Clear_Tx_Buffer(void)
{
    for(uint8_t i = 0;i<32;i++)
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	80 32       	cpi	r24, 0x20	; 32
     c8c:	b8 f3       	brcs	.-18     	; 0xc7c <Clear_Tx_Buffer+0x4>
    {
        LCD_Tx_Data[i] = ' ';
    }
}
     c8e:	08 95       	ret

00000c90 <LCD_Transmit_Command>:

void LCD_Transmit_Command(char cmd)
{
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
     c90:	e5 e6       	ldi	r30, 0x65	; 101
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	90 81       	ld	r25, Z
     c96:	9b 7f       	andi	r25, 0xFB	; 251
     c98:	90 83       	st	Z, r25
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
     c9a:	90 81       	ld	r25, Z
     c9c:	9d 7f       	andi	r25, 0xFD	; 253
     c9e:	90 83       	st	Z, r25
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
     ca0:	90 81       	ld	r25, Z
     ca2:	91 60       	ori	r25, 0x01	; 1
     ca4:	90 83       	st	Z, r25
     ca6:	95 e0       	ldi	r25, 0x05	; 5
     ca8:	9a 95       	dec	r25
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_Transmit_Command+0x18>
	_delay_us(1);
	PORTA = cmd;          // 명령 출력
     cac:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
     cae:	80 81       	ld	r24, Z
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	80 83       	st	Z, r24
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	8a 95       	dec	r24
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <LCD_Transmit_Command+0x26>
     cba:	08 95       	ret

00000cbc <LCD_Init>:
    DDRD = 0x00;
}

void LCD_Init(void)
{
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     cbc:	88 e3       	ldi	r24, 0x38	; 56
     cbe:	e8 df       	rcall	.-48     	; 0xc90 <LCD_Transmit_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	86 e6       	ldi	r24, 0x66	; 102
     cc2:	9e e0       	ldi	r25, 0x0E	; 14
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <LCD_Init+0x8>
     cc8:	00 00       	nop
	_delay_ms(1);		
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     cca:	88 e3       	ldi	r24, 0x38	; 56
     ccc:	e1 df       	rcall	.-62     	; 0xc90 <LCD_Transmit_Command>
     cce:	86 e6       	ldi	r24, 0x66	; 102
     cd0:	9e e0       	ldi	r25, 0x0E	; 14
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <LCD_Init+0x16>
	_delay_ms(1);	
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     cd6:	00 00       	nop
     cd8:	88 e3       	ldi	r24, 0x38	; 56
     cda:	da df       	rcall	.-76     	; 0xc90 <LCD_Transmit_Command>
     cdc:	86 e6       	ldi	r24, 0x66	; 102
     cde:	9e e0       	ldi	r25, 0x0E	; 14
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <LCD_Init+0x24>
	_delay_ms(1);	
	LCD_Transmit_Command(0x0C); // Display ON
     ce4:	00 00       	nop
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	d3 df       	rcall	.-90     	; 0xc90 <LCD_Transmit_Command>
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	9f e8       	ldi	r25, 0x8F	; 143
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <LCD_Init+0x32>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <LCD_Init+0x38>
	_delay_ms(10);
	LCD_Transmit_Command(0x06); // Increment Mode
     cf4:	00 00       	nop
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	cb df       	rcall	.-106    	; 0xc90 <LCD_Transmit_Command>
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	9f e8       	ldi	r25, 0x8F	; 143
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <LCD_Init+0x42>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <LCD_Init+0x48>
	_delay_ms(10);
	LCD_Transmit_Command(0x01); // Display Clear
     d04:	00 00       	nop
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	c3 df       	rcall	.-122    	; 0xc90 <LCD_Transmit_Command>
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	9f e8       	ldi	r25, 0x8F	; 143
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <LCD_Init+0x52>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <LCD_Init+0x58>
     d14:	00 00       	nop
     d16:	08 95       	ret

00000d18 <LCD_Cursor>:
	_delay_us(1);
}

void LCD_Cursor(char col, char row)
{
	LCD_Transmit_Command(0x80 | (row + col * 0x40));
     d18:	90 e4       	ldi	r25, 0x40	; 64
     d1a:	89 9f       	mul	r24, r25
     d1c:	60 0d       	add	r22, r0
     d1e:	11 24       	eor	r1, r1
     d20:	86 2f       	mov	r24, r22
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	b5 cf       	rjmp	.-150    	; 0xc90 <LCD_Transmit_Command>
     d26:	08 95       	ret

00000d28 <LCD_Transmit_Data>:
}

void LCD_Transmit_Data(char data)
{
	sbi(LCD_CON, LCD_RS);
     d28:	e5 e6       	ldi	r30, 0x65	; 101
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	90 81       	ld	r25, Z
     d2e:	94 60       	ori	r25, 0x04	; 4
     d30:	90 83       	st	Z, r25
	cbi(LCD_CON, LCD_RW);
     d32:	90 81       	ld	r25, Z
     d34:	9d 7f       	andi	r25, 0xFD	; 253
     d36:	90 83       	st	Z, r25
	sbi(LCD_CON, LCD_E);
     d38:	90 81       	ld	r25, Z
     d3a:	91 60       	ori	r25, 0x01	; 1
     d3c:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3e:	95 e0       	ldi	r25, 0x05	; 5
     d40:	9a 95       	dec	r25
     d42:	f1 f7       	brne	.-4      	; 0xd40 <LCD_Transmit_Data+0x18>
	_delay_us(1);
	LCD_DATA = data;
     d44:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_CON, LCD_E);
     d46:	80 81       	ld	r24, Z
     d48:	8e 7f       	andi	r24, 0xFE	; 254
     d4a:	80 83       	st	Z, r24
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	8a 95       	dec	r24
     d50:	f1 f7       	brne	.-4      	; 0xd4e <LCD_Transmit_Data+0x26>
     d52:	08 95       	ret

00000d54 <LCD_Print>:
            }
        break;
    }
}
void LCD_Print(void)
{
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
    static uint8_t open_status,shift_counter;

    if(open_status == 0)
     d58:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <open_status.2181>
     d5c:	81 11       	cpse	r24, r1
     d5e:	0b c0       	rjmp	.+22     	; 0xd76 <LCD_Print+0x22>
    {
        shift_counter++;
     d60:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2182>
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <shift_counter.2182>
        if(shift_counter>= 10)
     d6a:	8a 30       	cpi	r24, 0x0A	; 10
     d6c:	68 f0       	brcs	.+26     	; 0xd88 <LCD_Print+0x34>
        {
            open_status = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <open_status.2181>
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <LCD_Print+0x34>
        }
    }
    else
    {
        shift_counter--;
     d76:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2182>
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <shift_counter.2182>
        if(shift_counter == 0)
     d80:	81 11       	cpse	r24, r1
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <LCD_Print+0x34>
        {
            open_status = 0;
     d84:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <open_status.2181>
        }
    }

    switch(Vending_Machine_status)
     d88:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <Vending_Machine_status>
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <LCD_Print+0x3e>
     d90:	4f c0       	rjmp	.+158    	; 0xe30 <LCD_Print+0xdc>
     d92:	38 f0       	brcs	.+14     	; 0xda2 <LCD_Print+0x4e>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	09 f4       	brne	.+2      	; 0xd9a <LCD_Print+0x46>
     d98:	8e c0       	rjmp	.+284    	; 0xeb6 <LCD_Print+0x162>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	09 f4       	brne	.+2      	; 0xda0 <LCD_Print+0x4c>
     d9e:	c2 c0       	rjmp	.+388    	; 0xf24 <LCD_Print+0x1d0>
     da0:	f0 c0       	rjmp	.+480    	; 0xf82 <LCD_Print+0x22e>
    {
        case VENDING_MACHINE_IDLE :
            Clear_Tx_Buffer();
     da2:	6a df       	rcall	.-300    	; 0xc78 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	b7 df       	rcall	.-146    	; 0xd18 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[0],"vending machine");   
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	e4 e3       	ldi	r30, 0x34	; 52
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	a0 ea       	ldi	r26, 0xA0	; 160
     db2:	b1 e0       	ldi	r27, 0x01	; 1
     db4:	01 90       	ld	r0, Z+
     db6:	0d 92       	st	X+, r0
     db8:	8a 95       	dec	r24
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <LCD_Print+0x60>
            for(uint8_t i = 0;i<16;i++)
     dbc:	c0 e0       	ldi	r28, 0x00	; 0
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <LCD_Print+0x7a>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     dc0:	ec 2f       	mov	r30, r28
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	e0 56       	subi	r30, 0x60	; 96
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	80 81       	ld	r24, Z
     dca:	ae df       	rcall	.-164    	; 0xd28 <LCD_Transmit_Data>
    {
        case VENDING_MACHINE_IDLE :
            Clear_Tx_Buffer();
            LCD_Cursor(0,0);
            sprintf(&LCD_Tx_Data[0],"vending machine");   
            for(uint8_t i = 0;i<16;i++)
     dcc:	cf 5f       	subi	r28, 0xFF	; 255
     dce:	c0 31       	cpi	r28, 0x10	; 16
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
     dd0:	b8 f3       	brcs	.-18     	; 0xdc0 <LCD_Print+0x6c>
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	a0 df       	rcall	.-192    	; 0xd18 <LCD_Cursor>
            LCD_Tx_Data[16+shift_counter] = '-';
     dd8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2182>
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	fc 01       	movw	r30, r24
     de0:	e0 55       	subi	r30, 0x50	; 80
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	2d e2       	ldi	r18, 0x2D	; 45
     de6:	20 83       	st	Z, r18
            LCD_Tx_Data[17+shift_counter] = 'O';
     de8:	fc 01       	movw	r30, r24
     dea:	ef 54       	subi	r30, 0x4F	; 79
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	3f e4       	ldi	r19, 0x4F	; 79
     df0:	30 83       	st	Z, r19
            LCD_Tx_Data[18+shift_counter] = 'P';
     df2:	fc 01       	movw	r30, r24
     df4:	ee 54       	subi	r30, 0x4E	; 78
     df6:	fe 4f       	sbci	r31, 0xFE	; 254
     df8:	30 e5       	ldi	r19, 0x50	; 80
     dfa:	30 83       	st	Z, r19
            LCD_Tx_Data[19+shift_counter] = 'E';
     dfc:	fc 01       	movw	r30, r24
     dfe:	ed 54       	subi	r30, 0x4D	; 77
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	35 e4       	ldi	r19, 0x45	; 69
     e04:	30 83       	st	Z, r19
            LCD_Tx_Data[20+shift_counter] = 'N';
     e06:	fc 01       	movw	r30, r24
     e08:	ec 54       	subi	r30, 0x4C	; 76
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	3e e4       	ldi	r19, 0x4E	; 78
     e0e:	30 83       	st	Z, r19
            LCD_Tx_Data[21+shift_counter] = '-';
     e10:	fc 01       	movw	r30, r24
     e12:	eb 54       	subi	r30, 0x4B	; 75
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	20 83       	st	Z, r18
            for(uint8_t i = 16;i<32;i++)
     e18:	c0 e1       	ldi	r28, 0x10	; 16
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <LCD_Print+0xd6>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     e1c:	ec 2f       	mov	r30, r28
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e0 56       	subi	r30, 0x60	; 96
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	80 81       	ld	r24, Z
     e26:	80 df       	rcall	.-256    	; 0xd28 <LCD_Transmit_Data>
            LCD_Tx_Data[17+shift_counter] = 'O';
            LCD_Tx_Data[18+shift_counter] = 'P';
            LCD_Tx_Data[19+shift_counter] = 'E';
            LCD_Tx_Data[20+shift_counter] = 'N';
            LCD_Tx_Data[21+shift_counter] = '-';
            for(uint8_t i = 16;i<32;i++)
     e28:	cf 5f       	subi	r28, 0xFF	; 255
     e2a:	c0 32       	cpi	r28, 0x20	; 32
     e2c:	b8 f3       	brcs	.-18     	; 0xe1c <LCD_Print+0xc8>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }            
        break;
        case VENDING_MACHINE_INSERT_COIN :
            Clear_Tx_Buffer();
     e2e:	a9 c0       	rjmp	.+338    	; 0xf82 <LCD_Print+0x22e>
     e30:	23 df       	rcall	.-442    	; 0xc78 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	70 df       	rcall	.-288    	; 0xd18 <LCD_Cursor>
     e38:	8e e0       	ldi	r24, 0x0E	; 14
            sprintf(&LCD_Tx_Data[0]," insert money");
     e3a:	e4 e4       	ldi	r30, 0x44	; 68
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	a0 ea       	ldi	r26, 0xA0	; 160
     e40:	b1 e0       	ldi	r27, 0x01	; 1
     e42:	01 90       	ld	r0, Z+
     e44:	0d 92       	st	X+, r0
     e46:	8a 95       	dec	r24
     e48:	e1 f7       	brne	.-8      	; 0xe42 <LCD_Print+0xee>
     e4a:	c0 e0       	ldi	r28, 0x00	; 0
            for(uint8_t i = 0;i<16;i++)
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <LCD_Print+0x108>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     e4e:	ec 2f       	mov	r30, r28
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	e0 56       	subi	r30, 0x60	; 96
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	80 81       	ld	r24, Z
     e58:	67 df       	rcall	.-306    	; 0xd28 <LCD_Transmit_Data>
        break;
        case VENDING_MACHINE_INSERT_COIN :
            Clear_Tx_Buffer();
            LCD_Cursor(0,0);
            sprintf(&LCD_Tx_Data[0]," insert money");
            for(uint8_t i = 0;i<16;i++)
     e5a:	cf 5f       	subi	r28, 0xFF	; 255
     e5c:	c0 31       	cpi	r28, 0x10	; 16
     e5e:	b8 f3       	brcs	.-18     	; 0xe4e <LCD_Print+0xfa>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	59 df       	rcall	.-334    	; 0xd18 <LCD_Cursor>
     e66:	e0 ea       	ldi	r30, 0xA0	; 160
            LCD_Tx_Data[17] = Coin_n1000 + 0x30; // 숫자 ASCII 변환
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <Coin_n1000>
     e6e:	80 5d       	subi	r24, 0xD0	; 208
     e70:	81 8b       	std	Z+17, r24	; 0x11
     e72:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <Coin_n100>
            LCD_Tx_Data[18] = Coin_n100 + 0x30; // 숫자 ASCII 변환
     e76:	80 5d       	subi	r24, 0xD0	; 208
     e78:	82 8b       	std	Z+18, r24	; 0x12
     e7a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Coin_n10>
            LCD_Tx_Data[19] = Coin_n10 + 0x30; // 숫자 ASCII 변환
     e7e:	80 5d       	subi	r24, 0xD0	; 208
     e80:	83 8b       	std	Z+19, r24	; 0x13
     e82:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <Coin_n1>
            LCD_Tx_Data[20] = Coin_n1 + 0x30; // 숫자 ASCII 변환
     e86:	80 5d       	subi	r24, 0xD0	; 208
     e88:	84 8b       	std	Z+20, r24	; 0x14
     e8a:	e6 eb       	ldi	r30, 0xB6	; 182
            sprintf(&LCD_Tx_Data[22],"won");
     e8c:	f1 e0       	ldi	r31, 0x01	; 1
     e8e:	87 e7       	ldi	r24, 0x77	; 119
     e90:	9f e6       	ldi	r25, 0x6F	; 111
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	8e e6       	ldi	r24, 0x6E	; 110
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02
            for(uint8_t i = 16;i<32;i++)
     e9e:	c0 e1       	ldi	r28, 0x10	; 16
     ea0:	07 c0       	rjmp	.+14     	; 0xeb0 <LCD_Print+0x15c>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     ea2:	ec 2f       	mov	r30, r28
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	e0 56       	subi	r30, 0x60	; 96
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	80 81       	ld	r24, Z
            LCD_Tx_Data[17] = Coin_n1000 + 0x30; // 숫자 ASCII 변환
            LCD_Tx_Data[18] = Coin_n100 + 0x30; // 숫자 ASCII 변환
            LCD_Tx_Data[19] = Coin_n10 + 0x30; // 숫자 ASCII 변환
            LCD_Tx_Data[20] = Coin_n1 + 0x30; // 숫자 ASCII 변환
            sprintf(&LCD_Tx_Data[22],"won");
            for(uint8_t i = 16;i<32;i++)
     eac:	3d df       	rcall	.-390    	; 0xd28 <LCD_Transmit_Data>
     eae:	cf 5f       	subi	r28, 0xFF	; 255
     eb0:	c0 32       	cpi	r28, 0x20	; 32
     eb2:	b8 f3       	brcs	.-18     	; 0xea2 <LCD_Print+0x14e>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }   
        break;
        case VENDING_MACHINE_SELECT_ITEM :
            Clear_Tx_Buffer();
     eb4:	66 c0       	rjmp	.+204    	; 0xf82 <LCD_Print+0x22e>
     eb6:	e0 de       	rcall	.-576    	; 0xc78 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	2d df       	rcall	.-422    	; 0xd18 <LCD_Cursor>
     ebe:	c0 ea       	ldi	r28, 0xA0	; 160
            sprintf(&LCD_Tx_Data[0],"selected goods");
     ec0:	d1 e0       	ldi	r29, 0x01	; 1
     ec2:	8f e0       	ldi	r24, 0x0F	; 15
     ec4:	e2 e5       	ldi	r30, 0x52	; 82
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	de 01       	movw	r26, r28
     eca:	01 90       	ld	r0, Z+
     ecc:	0d 92       	st	X+, r0
     ece:	8a 95       	dec	r24
     ed0:	e1 f7       	brne	.-8      	; 0xeca <LCD_Print+0x176>
     ed2:	8e e3       	ldi	r24, 0x3E	; 62
            LCD_Tx_Data[13] = 0x3E;
     ed4:	8d 87       	std	Y+13, r24	; 0x0d
            LCD_Tx_Data[14] = Selected_Num + 0x30; // 숫자 ASCII 변환
     ed6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Selected_Num>
     eda:	80 5d       	subi	r24, 0xD0	; 208
     edc:	8e 87       	std	Y+14, r24	; 0x0e
            for(uint8_t i = 0;i<16;i++)
     ede:	c0 e0       	ldi	r28, 0x00	; 0
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <LCD_Print+0x19c>
     ee2:	ec 2f       	mov	r30, r28
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e0 56       	subi	r30, 0x60	; 96
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 81       	ld	r24, Z
     eec:	1d df       	rcall	.-454    	; 0xd28 <LCD_Transmit_Data>
            Clear_Tx_Buffer();
            LCD_Cursor(0,0);
            sprintf(&LCD_Tx_Data[0],"selected goods");
            LCD_Tx_Data[13] = 0x3E;
            LCD_Tx_Data[14] = Selected_Num + 0x30; // 숫자 ASCII 변환
            for(uint8_t i = 0;i<16;i++)
     eee:	cf 5f       	subi	r28, 0xFF	; 255
     ef0:	c0 31       	cpi	r28, 0x10	; 16
     ef2:	b8 f3       	brcs	.-18     	; 0xee2 <LCD_Print+0x18e>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0f df       	rcall	.-482    	; 0xd18 <LCD_Cursor>
     efa:	81 e1       	ldi	r24, 0x11	; 17
            sprintf(&LCD_Tx_Data[16],"buyit-A cancel-D");
     efc:	e1 e6       	ldi	r30, 0x61	; 97
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	a0 eb       	ldi	r26, 0xB0	; 176
     f02:	b1 e0       	ldi	r27, 0x01	; 1
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	8a 95       	dec	r24
            for(uint8_t i = 16;i<32;i++)
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <LCD_Print+0x1b0>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     f0c:	c0 e1       	ldi	r28, 0x10	; 16
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <LCD_Print+0x1ca>
     f10:	ec 2f       	mov	r30, r28
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	e0 56       	subi	r30, 0x60	; 96
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	80 81       	ld	r24, Z
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
            sprintf(&LCD_Tx_Data[16],"buyit-A cancel-D");
            for(uint8_t i = 16;i<32;i++)
     f1a:	06 df       	rcall	.-500    	; 0xd28 <LCD_Transmit_Data>
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
     f1e:	c0 32       	cpi	r28, 0x20	; 32
     f20:	b8 f3       	brcs	.-18     	; 0xf10 <LCD_Print+0x1bc>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }   
        break;
        case VENDING_MACHINE_MONEY_ERROR :
            Clear_Tx_Buffer();
     f22:	2f c0       	rjmp	.+94     	; 0xf82 <LCD_Print+0x22e>
     f24:	a9 de       	rcall	.-686    	; 0xc78 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);        
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	f6 de       	rcall	.-532    	; 0xd18 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[0]," be short of");
     f2c:	8d e0       	ldi	r24, 0x0D	; 13
     f2e:	e2 e7       	ldi	r30, 0x72	; 114
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	a0 ea       	ldi	r26, 0xA0	; 160
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
            for(uint8_t i = 0;i<16;i++)
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <LCD_Print+0x1e2>
     f3e:	c0 e0       	ldi	r28, 0x00	; 0
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <LCD_Print+0x1fc>
     f42:	ec 2f       	mov	r30, r28
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	e0 56       	subi	r30, 0x60	; 96
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	80 81       	ld	r24, Z
     f4c:	ed de       	rcall	.-550    	; 0xd28 <LCD_Transmit_Data>
        break;
        case VENDING_MACHINE_MONEY_ERROR :
            Clear_Tx_Buffer();
            LCD_Cursor(0,0);        
            sprintf(&LCD_Tx_Data[0]," be short of");
            for(uint8_t i = 0;i<16;i++)
     f4e:	cf 5f       	subi	r28, 0xFF	; 255
     f50:	c0 31       	cpi	r28, 0x10	; 16
     f52:	b8 f3       	brcs	.-18     	; 0xf42 <LCD_Print+0x1ee>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);        
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	df de       	rcall	.-578    	; 0xd18 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[16],"  money.......");
     f5a:	8f e0       	ldi	r24, 0x0F	; 15
     f5c:	ef e7       	ldi	r30, 0x7F	; 127
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	a0 eb       	ldi	r26, 0xB0	; 176
     f62:	b1 e0       	ldi	r27, 0x01	; 1
     f64:	01 90       	ld	r0, Z+
     f66:	0d 92       	st	X+, r0
     f68:	8a 95       	dec	r24
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <LCD_Print+0x210>
            for(uint8_t i = 16;i<32;i++)
     f6c:	c0 e1       	ldi	r28, 0x10	; 16
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <LCD_Print+0x22a>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     f70:	ec 2f       	mov	r30, r28
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	e0 56       	subi	r30, 0x60	; 96
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	80 81       	ld	r24, Z
     f7a:	d6 de       	rcall	.-596    	; 0xd28 <LCD_Transmit_Data>
     f7c:	cf 5f       	subi	r28, 0xFF	; 255
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);        
            sprintf(&LCD_Tx_Data[16],"  money.......");
            for(uint8_t i = 16;i<32;i++)
     f7e:	c0 32       	cpi	r28, 0x20	; 32
     f80:	b8 f3       	brcs	.-18     	; 0xf70 <LCD_Print+0x21c>
     f82:	df 91       	pop	r29
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            } 
        break;
    }

}
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <Seven_Segment_Output>:
     f88:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <counter.2284>

void Seven_Segment_Output(void)
{
    static uint8_t counter;

    counter++;
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <counter.2284>
    if(counter>=4)
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	10 f0       	brcs	.+4      	; 0xf9a <Seven_Segment_Output+0x12>
    {
        counter = 0;
     f96:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <counter.2284>
    }
    
    switch(Vending_Machine_status)
     f9a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <Vending_Machine_status>
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <Seven_Segment_Output+0x20>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	20 f0       	brcs	.+8      	; 0xfae <Seven_Segment_Output+0x26>
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <Seven_Segment_Output+0x32>
     fa8:	85 30       	cpi	r24, 0x05	; 5
     faa:	39 f0       	breq	.+14     	; 0xfba <Seven_Segment_Output+0x32>
     fac:	38 c0       	rjmp	.+112    	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    {
        case VENDING_MACHINE_IDLE :
            PORTE = 0xF0; // Seven Segment 선택 FND0~3
     fae:	80 ef       	ldi	r24, 0xF0	; 240
     fb0:	83 b9       	out	0x03, r24	; 3
            PORTB = Seven_Segment_Num[10]; //- - - - 출력
     fb2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Seven_Segment_Num+0xa>
     fb6:	88 bb       	out	0x18, r24	; 24
        break;
     fb8:	08 95       	ret
        case VENDING_MACHINE_INSERT_COIN :
        case VENDING_MACHINE_SELECT_ITEM :
        case VENDING_MACHINE_ITEM_SELECTED :
        case VENDING_MACHINE_MONEY_FINISH :
            switch(counter)
     fba:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <counter.2284>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	81 f0       	breq	.+32     	; 0xfe2 <Seven_Segment_Output+0x5a>
     fc2:	28 f0       	brcs	.+10     	; 0xfce <Seven_Segment_Output+0x46>
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	b9 f0       	breq	.+46     	; 0xff6 <Seven_Segment_Output+0x6e>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	f9 f0       	breq	.+62     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     fcc:	08 95       	ret
            {
                case SEVEN_SEGMENT_0 :
                    PORTE = 0x10; //FND0 선택
     fce:	80 e1       	ldi	r24, 0x10	; 16
     fd0:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n1]; //첫번째 자리 출력
     fd2:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <Coin_n1>
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e7 5d       	subi	r30, 0xD7	; 215
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	80 81       	ld	r24, Z
     fde:	88 bb       	out	0x18, r24	; 24
                break;
     fe0:	08 95       	ret
                case SEVEN_SEGMENT_1 :
                    PORTE = 0x20; //FND1 선택
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n10]; //두번째 자리 출력
     fe6:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <Coin_n10>
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	e7 5d       	subi	r30, 0xD7	; 215
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	80 81       	ld	r24, Z
     ff2:	88 bb       	out	0x18, r24	; 24
                break;
     ff4:	08 95       	ret
                case SEVEN_SEGMENT_2 :
                    PORTE = 0x40; //FND2 선택
     ff6:	80 e4       	ldi	r24, 0x40	; 64
     ff8:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n100]; //세번째 자리 출력
     ffa:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <Coin_n100>
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	e7 5d       	subi	r30, 0xD7	; 215
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	80 81       	ld	r24, Z
    1006:	88 bb       	out	0x18, r24	; 24
                break;
    1008:	08 95       	ret
                case SEVEN_SEGMENT_3 :
                    PORTE = 0x80; //FND3 선택
    100a:	80 e8       	ldi	r24, 0x80	; 128
    100c:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n1000]; //네번째 자리 출력
    100e:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <Coin_n1000>
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	e7 5d       	subi	r30, 0xD7	; 215
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	88 bb       	out	0x18, r24	; 24
                break;
    101c:	08 95       	ret
                default :
                break;
            }
        break;
        default :
            PORTB = 0xFF;
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	88 bb       	out	0x18, r24	; 24
    1022:	08 95       	ret

00001024 <LED_Output>:
    }
}

void LED_Output(void)
{
    for(uint8_t i = 0;i<8;i++)
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	24 c0       	rjmp	.+72     	; 0x1070 <LED_Output+0x4c>
    {
        if(Vending_Machine_Count[i]>0)
    1028:	e8 2f       	mov	r30, r24
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	ef 5d       	subi	r30, 0xDF	; 223
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	90 81       	ld	r25, Z
    1032:	99 23       	and	r25, r25
    1034:	71 f0       	breq	.+28     	; 0x1052 <LED_Output+0x2e>
        {
            sbi(PORTF,i);
    1036:	e2 e6       	ldi	r30, 0x62	; 98
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	90 81       	ld	r25, Z
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	08 2e       	mov	r0, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <LED_Output+0x24>
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <LED_Output+0x20>
    104c:	29 2b       	or	r18, r25
    104e:	20 83       	st	Z, r18
    1050:	0e c0       	rjmp	.+28     	; 0x106e <LED_Output+0x4a>
        }
        else
        {
            cbi(PORTF,i);
    1052:	e2 e6       	ldi	r30, 0x62	; 98
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	90 81       	ld	r25, Z
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	08 2e       	mov	r0, r24
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <LED_Output+0x40>
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <LED_Output+0x3c>
    1068:	20 95       	com	r18
    106a:	29 23       	and	r18, r25
    106c:	20 83       	st	Z, r18
    }
}

void LED_Output(void)
{
    for(uint8_t i = 0;i<8;i++)
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	d0 f2       	brcs	.-76     	; 0x1028 <LED_Output+0x4>
        else
        {
            cbi(PORTF,i);
        }
    }
}
    1074:	08 95       	ret

00001076 <main>:
void Send_Char(char data);
/*************************************/

int main(void)
{
    Port_Init();
    1076:	42 d8       	rcall	.-3964   	; 0xfc <Port_Init>
    LCD_Init();
    1078:	21 de       	rcall	.-958    	; 0xcbc <LCD_Init>
    Timer1_Init();
    107a:	4e d8       	rcall	.-3940   	; 0x118 <Timer1_Init>
    Timer3_Init();
    107c:	55 d8       	rcall	.-3926   	; 0x128 <Timer3_Init>
    107e:	60 d8       	rcall	.-3904   	; 0x140 <ISR_Init>
    ISR_Init();
    1080:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Timer_10ms_flag>
    while (1) 
    {
        if(Timer_10ms_flag == 1)
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	39 f4       	brne	.+14     	; 0x1096 <main+0x20>
        {
            Timer_10ms_flag = 0;
    1088:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Timer_10ms_flag>
            Key_Scan(); // 키패드 스캔 함수
    108c:	60 d8       	rcall	.-3904   	; 0x14e <Key_Scan>
            Switch_Scan(); // 코인 Input 스위치 스캔 함수
    108e:	f9 d8       	rcall	.-3598   	; 0x282 <Switch_Scan>
    1090:	8a da       	rcall	.-2796   	; 0x5a6 <Vending_Machine_Mode>
            Vending_Machine_Mode(); // 자판기 동작 모드 결정 함수
    1092:	3d db       	rcall	.-2438   	; 0x70e <Melody_Update>
    1094:	79 df       	rcall	.-270    	; 0xf88 <Seven_Segment_Output>
            Melody_Update(); // 멜로디 출력 함수
    1096:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Timer_100ms_flag>
            Seven_Segment_Output(); // Seven Segment 출력 함수
    109a:	81 30       	cpi	r24, 0x01	; 1
        }

        if(Timer_100ms_flag == 1)
    109c:	89 f7       	brne	.-30     	; 0x1080 <main+0xa>
    109e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Timer_100ms_flag>
    10a2:	c0 df       	rcall	.-128    	; 0x1024 <LED_Output>
        {
            Timer_100ms_flag = 0;
    10a4:	57 de       	rcall	.-850    	; 0xd54 <LCD_Print>
    10a6:	ec cf       	rjmp	.-40     	; 0x1080 <main+0xa>

000010a8 <__vector_12>:
            LED_Output(); // 상품 재고 LED 출력 함수
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
            LCD_Print(); // LCD 출력 함수
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
        }
    }
}

ISR(TIMER1_COMPA_vect)
{
    10b2:	8f 93       	push	r24
    Timer_10ms_flag = 1; //10ms 마다 flag set
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Timer_10ms_flag>
    Timer_10ms_counter++;
    10ba:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Timer_10ms_counter>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Timer_10ms_counter>
    if(Timer_10ms_counter>=10)
    10c4:	8a 30       	cpi	r24, 0x0A	; 10
    10c6:	28 f0       	brcs	.+10     	; 0x10d2 <__vector_12+0x2a>
    {
        Timer_10ms_counter = 0;
    10c8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Timer_10ms_counter>
        Timer_100ms_flag = 1; // 100ms 마다 flag set
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <Timer_100ms_flag>
    }
}
    10d2:	8f 91       	pop	r24
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	0b b6       	in	r0, 0x3b	; 59
    10ea:	0f 92       	push	r0
    10ec:	8f 93       	push	r24
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    static uint8_t flag;
    if((Melody_status != MELODY_STATUS_START)&&(Melody_status != MELODY_STATUS_FINISHED))
    10f2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Melody_status>
    10f6:	88 23       	and	r24, r24
    10f8:	b9 f0       	breq	.+46     	; 0x1128 <__stack+0x29>
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <__stack+0x29>
    {
        if(flag == 0)
    10fe:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
    1102:	81 11       	cpse	r24, r1
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <__stack+0x19>
        {
            sbi(PORTG,4);
    1106:	e5 e6       	ldi	r30, 0x65	; 101
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 61       	ori	r24, 0x10	; 16
    110e:	80 83       	st	Z, r24
            flag = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <__stack+0x37>
        }
        else
        {
            cbi(PORTG,4);
    1118:	e5 e6       	ldi	r30, 0x65	; 101
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7e       	andi	r24, 0xEF	; 239
    1120:	80 83       	st	Z, r24
            flag = 0;
    1122:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <__stack+0x37>
        }
    }
    else
    {
        cbi(PORTG,4);
    1128:	e5 e6       	ldi	r30, 0x65	; 101
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7e       	andi	r24, 0xEF	; 239
    1130:	80 83       	st	Z, r24
        flag = 0;
    1132:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
    }
}
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	8f 91       	pop	r24
    113c:	0f 90       	pop	r0
    113e:	0b be       	out	0x3b, r0	; 59
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <__tablejump2__>:
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	00 24       	eor	r0, r0
    1150:	00 1c       	adc	r0, r0
    1152:	0b be       	out	0x3b, r0	; 59
    1154:	07 90       	elpm	r0, Z+
    1156:	f6 91       	elpm	r31, Z
    1158:	e0 2d       	mov	r30, r0
    115a:	09 94       	ijmp

0000115c <__umulhisi3>:
    115c:	a2 9f       	mul	r26, r18
    115e:	b0 01       	movw	r22, r0
    1160:	b3 9f       	mul	r27, r19
    1162:	c0 01       	movw	r24, r0
    1164:	a3 9f       	mul	r26, r19
    1166:	70 0d       	add	r23, r0
    1168:	81 1d       	adc	r24, r1
    116a:	11 24       	eor	r1, r1
    116c:	91 1d       	adc	r25, r1
    116e:	b2 9f       	mul	r27, r18
    1170:	70 0d       	add	r23, r0
    1172:	81 1d       	adc	r24, r1
    1174:	11 24       	eor	r1, r1
    1176:	91 1d       	adc	r25, r1
    1178:	08 95       	ret

0000117a <_exit>:
    117a:	f8 94       	cli

0000117c <__stop_program>:
    117c:	ff cf       	rjmp	.-2      	; 0x117c <__stop_program>
