
ATMEGA128_VendingMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  0080018e  0080018e  0000131c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cb  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098c  00000000  00000000  0000291b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f4d  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000041f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073a  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  00004b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000051aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	00 00       	nop
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	e7 c6       	rjmp	.+3534   	; 0xe00 <__vector_12>
      32:	00 00       	nop
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c6       	rjmp	.+3532   	; 0xe36 <__vector_26>
      6a:	00 00       	nop
      6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	be 02       	muls	r27, r30
      8e:	c9 02       	muls	r28, r25
      90:	df 02       	muls	r29, r31
      92:	ee 02       	muls	r30, r30
      94:	2e 03       	fmul	r18, r22
      96:	36 03       	mulsu	r19, r22
      98:	4e 03       	fmul	r20, r22
      9a:	57 04       	cpc	r5, r7
      9c:	07 05       	cpc	r16, r7
      9e:	eb 04       	cpc	r14, r11
      a0:	cf 04       	cpc	r12, r15
      a2:	b3 04       	cpc	r11, r3
      a4:	97 04       	cpc	r9, r7
      a6:	7b 04       	cpc	r7, r11
      a8:	5f 04       	cpc	r5, r15
      aa:	23 05       	cpc	r18, r3
      ac:	3d 05       	cpc	r19, r13
      ae:	45 05       	cpc	r20, r5
      b0:	61 05       	cpc	r22, r1
      b2:	7d 05       	cpc	r23, r13
      b4:	99 05       	cpc	r25, r9
      b6:	b5 05       	cpc	r27, r5
      b8:	d1 05       	cpc	r29, r1
      ba:	ec 05       	cpc	r30, r12
      bc:	07 06       	cpc	r0, r23

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d0 e1       	ldi	r29, 0x10	; 16
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ea ef       	ldi	r30, 0xFA	; 250
      d2:	f1 e1       	ldi	r31, 0x11	; 17
      d4:	00 e0       	ldi	r16, 0x00	; 0
      d6:	0b bf       	out	0x3b, r16	; 59
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
      da:	07 90       	elpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	ae 38       	cpi	r26, 0x8E	; 142
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	ae e8       	ldi	r26, 0x8E	; 142
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a9 3c       	cpi	r26, 0xC9	; 201
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 c4 08 	call	0x1188	; 0x1188 <main>
      f8:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_exit>

000000fc <__bad_interrupt>:
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <Port_Init>:
    }
}

void Port_Init(void)
{
    DDRE = 0xF0; // 7-세그먼트 선택 포트 출력 설정 (PE4 : FND0, PE5, FND1, PE6 : FND2, PE7 : FND3)
      fe:	80 ef       	ldi	r24, 0xF0	; 240
     100:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; // 7-세그먼트 포트 출력 설정
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	87 bb       	out	0x17, r24	; 23
    DDRC = 0x0F; // PC0~3 : Output , PC4~7 : Input 설정
     106:	9f e0       	ldi	r25, 0x0F	; 15
     108:	94 bb       	out	0x14, r25	; 20
    DDRA = 0xFF; // LCD Data line 출력 설정 PA0~PA7
     10a:	8a bb       	out	0x1a, r24	; 26
    DDRF = 0xFF; // 재고 LED 출력 설정
     10c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    DDRG = 0x17; // LCD Command line 출력 설정 PG0~PG2,PG4
     110:	87 e1       	ldi	r24, 0x17	; 23
     112:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    DDRD = 0x00;
     116:	11 ba       	out	0x11, r1	; 17
     118:	08 95       	ret

0000011a <Timer1_Init>:

}

void Timer1_Init(void)
{
    TCCR1A = 0x00;
     11a:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x0D; //CTC Mode , Prescale = 1024
     11c:	8d e0       	ldi	r24, 0x0D	; 13
     11e:	8e bd       	out	0x2e, r24	; 46
                   // 1 Tick당 0.069444[ms]
    OCR1A = 144;  // 144 Tick : 10[ms]
     120:	80 e9       	ldi	r24, 0x90	; 144
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	9b bd       	out	0x2b, r25	; 43
     126:	8a bd       	out	0x2a, r24	; 42
     128:	08 95       	ret

0000012a <Timer3_Init>:
}

void Timer3_Init(void)
{
    TCCR3A = 0x00;
     12a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    TCCR3B = 0x0A; //CTC Mode , Prescale = 8
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
                   // 1 Tick당 0.54253472[us]
    OCR3A = 3517;  // 3517 Tick : 1908[us] -도-
     134:	8d eb       	ldi	r24, 0xBD	; 189
     136:	9d e0       	ldi	r25, 0x0D	; 13
     138:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     13c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     140:	08 95       	ret

00000142 <ISR_Init>:
}

void ISR_Init(void)
{
    TIMSK = 0x10; //Timer1 Output Compare A Match Interrupt Enable
     142:	80 e1       	ldi	r24, 0x10	; 16
     144:	87 bf       	out	0x37, r24	; 55
    ETIMSK = 0x10; // Timer3 Output Compare A Match Interrupt Enable
     146:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    SREG = 0x80; //Global Interrupt Enable
     14a:	80 e8       	ldi	r24, 0x80	; 128
     14c:	8f bf       	out	0x3f, r24	; 63
     14e:	08 95       	ret

00000150 <Key_Scan>:
}

void Key_Scan(void)
{   
    row++;
     150:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <row>
     154:	8f 5f       	subi	r24, 0xFF	; 255
     156:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <row>
    if(row>=4)
     15a:	84 30       	cpi	r24, 0x04	; 4
     15c:	10 f0       	brcs	.+4      	; 0x162 <Key_Scan+0x12>
    {
        row = 0;
     15e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <row>
    }

    switch(row)
     162:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <row>
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	49 f0       	breq	.+18     	; 0x17c <Key_Scan+0x2c>
     16a:	28 f0       	brcs	.+10     	; 0x176 <Key_Scan+0x26>
     16c:	82 30       	cpi	r24, 0x02	; 2
     16e:	49 f0       	breq	.+18     	; 0x182 <Key_Scan+0x32>
     170:	83 30       	cpi	r24, 0x03	; 3
     172:	51 f0       	breq	.+20     	; 0x188 <Key_Scan+0x38>
     174:	0b c0       	rjmp	.+22     	; 0x18c <Key_Scan+0x3c>
    {
        case 0 :
            PORTC = 0xFE;
     176:	8e ef       	ldi	r24, 0xFE	; 254
     178:	85 bb       	out	0x15, r24	; 21
        break;
     17a:	08 c0       	rjmp	.+16     	; 0x18c <Key_Scan+0x3c>
        case 1 :
            PORTC = 0xFD;
     17c:	8d ef       	ldi	r24, 0xFD	; 253
     17e:	85 bb       	out	0x15, r24	; 21
        break;
     180:	05 c0       	rjmp	.+10     	; 0x18c <Key_Scan+0x3c>
        case 2 :
            PORTC = 0xFB;
     182:	8b ef       	ldi	r24, 0xFB	; 251
     184:	85 bb       	out	0x15, r24	; 21
        break;
     186:	02 c0       	rjmp	.+4      	; 0x18c <Key_Scan+0x3c>
        case 3 :
            PORTC = 0xF7;
     188:	87 ef       	ldi	r24, 0xF7	; 247
     18a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18c:	83 e3       	ldi	r24, 0x33	; 51
     18e:	97 e0       	ldi	r25, 0x07	; 7
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <Key_Scan+0x40>
        default : 
        break;
    }
    _delay_us(500);

    column = (PINC & 0xF0)>>4;
     194:	83 b3       	in	r24, 0x13	; 19
     196:	82 95       	swap	r24
     198:	8f 70       	andi	r24, 0x0F	; 15
     19a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <column>

    if((row == 0) && (column != 0))
     19e:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <row>
     1a2:	91 11       	cpse	r25, r1
     1a4:	1b c0       	rjmp	.+54     	; 0x1dc <Key_Scan+0x8c>
     1a6:	88 23       	and	r24, r24
     1a8:	c9 f0       	breq	.+50     	; 0x1dc <Key_Scan+0x8c>
    {
        if(column == 14)
     1aa:	8e 30       	cpi	r24, 0x0E	; 14
     1ac:	21 f4       	brne	.+8      	; 0x1b6 <Key_Scan+0x66>
        {
            Keypad_Num = '1';
     1ae:	81 e3       	ldi	r24, 0x31	; 49
     1b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1b4:	08 95       	ret
        }
        else if(column == 13)
     1b6:	8d 30       	cpi	r24, 0x0D	; 13
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <Key_Scan+0x72>
        {
            Keypad_Num = '2';
     1ba:	82 e3       	ldi	r24, 0x32	; 50
     1bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1c0:	08 95       	ret
        }
        else if(column == 11)
     1c2:	8b 30       	cpi	r24, 0x0B	; 11
     1c4:	21 f4       	brne	.+8      	; 0x1ce <Key_Scan+0x7e>
        {
            Keypad_Num = '3';
     1c6:	83 e3       	ldi	r24, 0x33	; 51
     1c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1cc:	08 95       	ret
        }
        else if(column == 7)
     1ce:	87 30       	cpi	r24, 0x07	; 7
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <Key_Scan+0x84>
     1d2:	57 c0       	rjmp	.+174    	; 0x282 <Key_Scan+0x132>
        {
            Keypad_Num = 'A';
     1d4:	81 e4       	ldi	r24, 0x41	; 65
     1d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1da:	08 95       	ret
        }
    }
    else if((row == 1) && (column != 0))
     1dc:	91 30       	cpi	r25, 0x01	; 1
     1de:	d1 f4       	brne	.+52     	; 0x214 <Key_Scan+0xc4>
     1e0:	88 23       	and	r24, r24
     1e2:	c1 f0       	breq	.+48     	; 0x214 <Key_Scan+0xc4>
    {
        if(column == 14)
     1e4:	8e 30       	cpi	r24, 0x0E	; 14
     1e6:	21 f4       	brne	.+8      	; 0x1f0 <Key_Scan+0xa0>
        {
            Keypad_Num = '4';
     1e8:	84 e3       	ldi	r24, 0x34	; 52
     1ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1ee:	08 95       	ret
        }
        else if(column == 13)
     1f0:	8d 30       	cpi	r24, 0x0D	; 13
     1f2:	21 f4       	brne	.+8      	; 0x1fc <Key_Scan+0xac>
        {
            Keypad_Num = '5';
     1f4:	85 e3       	ldi	r24, 0x35	; 53
     1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     1fa:	08 95       	ret
        }
        else if(column == 11)
     1fc:	8b 30       	cpi	r24, 0x0B	; 11
     1fe:	21 f4       	brne	.+8      	; 0x208 <Key_Scan+0xb8>
        {
            Keypad_Num = '6';           
     200:	86 e3       	ldi	r24, 0x36	; 54
     202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     206:	08 95       	ret
        }
        else if(column == 7)
     208:	87 30       	cpi	r24, 0x07	; 7
     20a:	d9 f5       	brne	.+118    	; 0x282 <Key_Scan+0x132>
        {
            Keypad_Num = 'B';
     20c:	82 e4       	ldi	r24, 0x42	; 66
     20e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     212:	08 95       	ret
        }
    }
    else if((row == 2) && (column != 0))
     214:	92 30       	cpi	r25, 0x02	; 2
     216:	d1 f4       	brne	.+52     	; 0x24c <Key_Scan+0xfc>
     218:	88 23       	and	r24, r24
     21a:	c1 f0       	breq	.+48     	; 0x24c <Key_Scan+0xfc>
    {
        if(column == 14)
     21c:	8e 30       	cpi	r24, 0x0E	; 14
     21e:	21 f4       	brne	.+8      	; 0x228 <Key_Scan+0xd8>
        {
            Keypad_Num = '7';
     220:	87 e3       	ldi	r24, 0x37	; 55
     222:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     226:	08 95       	ret
        }
        else if(column == 13)
     228:	8d 30       	cpi	r24, 0x0D	; 13
     22a:	21 f4       	brne	.+8      	; 0x234 <Key_Scan+0xe4>
        {
            Keypad_Num = '8';
     22c:	88 e3       	ldi	r24, 0x38	; 56
     22e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     232:	08 95       	ret
        }
        else if(column == 11)
     234:	8b 30       	cpi	r24, 0x0B	; 11
     236:	21 f4       	brne	.+8      	; 0x240 <Key_Scan+0xf0>
        {
            Keypad_Num = '9';           
     238:	89 e3       	ldi	r24, 0x39	; 57
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     23e:	08 95       	ret
        }
        else if(column == 7)
     240:	87 30       	cpi	r24, 0x07	; 7
     242:	f9 f4       	brne	.+62     	; 0x282 <Key_Scan+0x132>
        {
            Keypad_Num = 'C';
     244:	83 e4       	ldi	r24, 0x43	; 67
     246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     24a:	08 95       	ret
        }
    }
    else if((row == 3) && (column != 0))
     24c:	93 30       	cpi	r25, 0x03	; 3
     24e:	c9 f4       	brne	.+50     	; 0x282 <Key_Scan+0x132>
     250:	88 23       	and	r24, r24
     252:	b9 f0       	breq	.+46     	; 0x282 <Key_Scan+0x132>
    {
        if(column == 14)
     254:	8e 30       	cpi	r24, 0x0E	; 14
     256:	21 f4       	brne	.+8      	; 0x260 <Key_Scan+0x110>
        {
            Keypad_Num = '*';
     258:	8a e2       	ldi	r24, 0x2A	; 42
     25a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     25e:	08 95       	ret
        }
        else if(column == 13)
     260:	8d 30       	cpi	r24, 0x0D	; 13
     262:	21 f4       	brne	.+8      	; 0x26c <Key_Scan+0x11c>
        {
            Keypad_Num = '0';
     264:	80 e3       	ldi	r24, 0x30	; 48
     266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     26a:	08 95       	ret
        }
        else if(column == 11)
     26c:	8b 30       	cpi	r24, 0x0B	; 11
     26e:	21 f4       	brne	.+8      	; 0x278 <Key_Scan+0x128>
        {
            Keypad_Num = '#';           
     270:	83 e2       	ldi	r24, 0x23	; 35
     272:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     276:	08 95       	ret
        }
        else if(column == 7)
     278:	87 30       	cpi	r24, 0x07	; 7
     27a:	19 f4       	brne	.+6      	; 0x282 <Key_Scan+0x132>
        {
            Keypad_Num = 'D';
     27c:	84 e4       	ldi	r24, 0x44	; 68
     27e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Keypad_Num>
     282:	08 95       	ret

00000284 <Switch_Scan>:
        }
    }
}

void Switch_Scan(void)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
    uint8_t PD0_status,PD1_status,PD2_status,PD3_status;
    static uint8_t PD0_status_old,PD1_status_old,PD2_status_old,PD3_status_old;

    PD0_status = PIND & 0x01;
     288:	80 b3       	in	r24, 0x10	; 16
    PD1_status = PIND & 0x02;
     28a:	e0 b3       	in	r30, 0x10	; 16
     28c:	e2 70       	andi	r30, 0x02	; 2
    PD2_status = 0;//PIND & 0x04;
    PD3_status = 0;//PIND & 0x08;

    if((PD0_status == 0x01)&&(PD0_status_old == 0))
     28e:	f8 2f       	mov	r31, r24
     290:	f1 70       	andi	r31, 0x01	; 1
     292:	80 ff       	sbrs	r24, 0
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <Switch_Scan+0x24>
     296:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <PD0_status_old.2164>
     29a:	81 11       	cpse	r24, r1
     29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Switch_Scan+0x24>
    {
        Coin_100++;
     29e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <Coin_100>
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <Coin_100>
    }
    if((PD1_status == 0x02)&&(PD1_status_old == 0))
     2a8:	e2 30       	cpi	r30, 0x02	; 2
     2aa:	49 f4       	brne	.+18     	; 0x2be <Switch_Scan+0x3a>
     2ac:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <PD1_status_old.2165>
     2b0:	81 11       	cpse	r24, r1
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <Switch_Scan+0x3a>
    {
        Coin_500++;
     2b4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Coin_500>
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Coin_500>
    if((PD3_status == 0x08)&&(PD3_status_old == 0))
    {
        Coin_5000++;
    }

    Coin_Total = Coin_100 * 100 + Coin_500 * 500 + Coin_1000 * 1000 + Coin_5000 * 5000;
     2be:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <Coin_100>
     2c2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <Coin_500>
     2c6:	24 ef       	ldi	r18, 0xF4	; 244
     2c8:	31 e0       	ldi	r19, 0x01	; 1
     2ca:	92 9f       	mul	r25, r18
     2cc:	a0 01       	movw	r20, r0
     2ce:	93 9f       	mul	r25, r19
     2d0:	50 0d       	add	r21, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	24 e6       	ldi	r18, 0x64	; 100
     2d6:	82 9f       	mul	r24, r18
     2d8:	40 0d       	add	r20, r0
     2da:	51 1d       	adc	r21, r1
     2dc:	11 24       	eor	r1, r1
     2de:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <Coin_1000>
     2e2:	28 ee       	ldi	r18, 0xE8	; 232
     2e4:	33 e0       	ldi	r19, 0x03	; 3
     2e6:	62 9f       	mul	r22, r18
     2e8:	c0 01       	movw	r24, r0
     2ea:	63 9f       	mul	r22, r19
     2ec:	90 0d       	add	r25, r0
     2ee:	11 24       	eor	r1, r1
     2f0:	48 0f       	add	r20, r24
     2f2:	59 1f       	adc	r21, r25
     2f4:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <Coin_5000>
     2f8:	88 e8       	ldi	r24, 0x88	; 136
     2fa:	93 e1       	ldi	r25, 0x13	; 19
     2fc:	68 9f       	mul	r22, r24
     2fe:	90 01       	movw	r18, r0
     300:	69 9f       	mul	r22, r25
     302:	30 0d       	add	r19, r0
     304:	11 24       	eor	r1, r1
     306:	42 0f       	add	r20, r18
     308:	53 1f       	adc	r21, r19
     30a:	50 93 97 01 	sts	0x0197, r21	; 0x800197 <Coin_Total+0x1>
     30e:	40 93 96 01 	sts	0x0196, r20	; 0x800196 <Coin_Total>

    if((Vending_Machine_status == VENDING_MACHINE_ITEM_SELECTED)||(Vending_Machine_status == VENDING_MACHINE_MONEY_FINISH))
     312:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Vending_Machine_status>
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	19 f0       	breq	.+6      	; 0x320 <Switch_Scan+0x9c>
     31a:	85 30       	cpi	r24, 0x05	; 5
     31c:	09 f0       	breq	.+2      	; 0x320 <Switch_Scan+0x9c>
     31e:	90 c0       	rjmp	.+288    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    {
        Coin_n1 = Coin_Inserted % 10;//첫번째 자리 취득 
     320:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <Coin_Inserted>
     324:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <Coin_Inserted+0x1>
     328:	9a 01       	movw	r18, r20
     32a:	ad ec       	ldi	r26, 0xCD	; 205
     32c:	bc ec       	ldi	r27, 0xCC	; 204
     32e:	54 d7       	rcall	.+3752   	; 0x11d8 <__umulhisi3>
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	9c 01       	movw	r18, r24
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	82 0f       	add	r24, r18
     350:	93 1f       	adc	r25, r19
     352:	9a 01       	movw	r18, r20
     354:	28 1b       	sub	r18, r24
     356:	39 0b       	sbc	r19, r25
     358:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <Coin_n1>
        Coin_n10 = (Coin_Inserted / 10) % 10; //두번째 자리 취득 
     35c:	9a 01       	movw	r18, r20
     35e:	3c d7       	rcall	.+3704   	; 0x11d8 <__umulhisi3>
     360:	ec 01       	movw	r28, r24
     362:	d6 95       	lsr	r29
     364:	c7 95       	ror	r28
     366:	d6 95       	lsr	r29
     368:	c7 95       	ror	r28
     36a:	d6 95       	lsr	r29
     36c:	c7 95       	ror	r28
     36e:	9e 01       	movw	r18, r28
     370:	33 d7       	rcall	.+3686   	; 0x11d8 <__umulhisi3>
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	96 95       	lsr	r25
     378:	87 95       	ror	r24
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	9c 01       	movw	r18, r24
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	82 0f       	add	r24, r18
     392:	93 1f       	adc	r25, r19
     394:	9e 01       	movw	r18, r28
     396:	28 1b       	sub	r18, r24
     398:	39 0b       	sbc	r19, r25
     39a:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <Coin_n10>
        Coin_n100 = (Coin_Inserted / 100) % 10; //세번째 자리 취득 
     39e:	9a 01       	movw	r18, r20
     3a0:	36 95       	lsr	r19
     3a2:	27 95       	ror	r18
     3a4:	36 95       	lsr	r19
     3a6:	27 95       	ror	r18
     3a8:	ab e7       	ldi	r26, 0x7B	; 123
     3aa:	b4 e1       	ldi	r27, 0x14	; 20
     3ac:	15 d7       	rcall	.+3626   	; 0x11d8 <__umulhisi3>
     3ae:	ec 01       	movw	r28, r24
     3b0:	d6 95       	lsr	r29
     3b2:	c7 95       	ror	r28
     3b4:	9e 01       	movw	r18, r28
     3b6:	ad ec       	ldi	r26, 0xCD	; 205
     3b8:	bc ec       	ldi	r27, 0xCC	; 204
     3ba:	0e d7       	rcall	.+3612   	; 0x11d8 <__umulhisi3>
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	9c 01       	movw	r18, r24
     3ca:	22 0f       	add	r18, r18
     3cc:	33 1f       	adc	r19, r19
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	82 0f       	add	r24, r18
     3dc:	93 1f       	adc	r25, r19
     3de:	9e 01       	movw	r18, r28
     3e0:	28 1b       	sub	r18, r24
     3e2:	39 0b       	sbc	r19, r25
     3e4:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <Coin_n100>
        Coin_n1000 = (Coin_Inserted / 1000) % 10; //네번째 자리 취득 
     3e8:	9a 01       	movw	r18, r20
     3ea:	36 95       	lsr	r19
     3ec:	27 95       	ror	r18
     3ee:	36 95       	lsr	r19
     3f0:	27 95       	ror	r18
     3f2:	36 95       	lsr	r19
     3f4:	27 95       	ror	r18
     3f6:	a5 ec       	ldi	r26, 0xC5	; 197
     3f8:	b0 e2       	ldi	r27, 0x20	; 32
     3fa:	ee d6       	rcall	.+3548   	; 0x11d8 <__umulhisi3>
     3fc:	ac 01       	movw	r20, r24
     3fe:	52 95       	swap	r21
     400:	42 95       	swap	r20
     402:	4f 70       	andi	r20, 0x0F	; 15
     404:	45 27       	eor	r20, r21
     406:	5f 70       	andi	r21, 0x0F	; 15
     408:	45 27       	eor	r20, r21
     40a:	9a 01       	movw	r18, r20
     40c:	ad ec       	ldi	r26, 0xCD	; 205
     40e:	bc ec       	ldi	r27, 0xCC	; 204
     410:	e3 d6       	rcall	.+3526   	; 0x11d8 <__umulhisi3>
     412:	96 95       	lsr	r25
     414:	87 95       	ror	r24
     416:	96 95       	lsr	r25
     418:	87 95       	ror	r24
     41a:	96 95       	lsr	r25
     41c:	87 95       	ror	r24
     41e:	9c 01       	movw	r18, r24
     420:	22 0f       	add	r18, r18
     422:	33 1f       	adc	r19, r19
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	82 0f       	add	r24, r18
     432:	93 1f       	adc	r25, r19
     434:	9a 01       	movw	r18, r20
     436:	28 1b       	sub	r18, r24
     438:	39 0b       	sbc	r19, r25
     43a:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <Coin_n1000>
    }
    else
    {
        Coin_n1 = Coin_Total % 10;//첫번째 자리 취득 
     43e:	8b c0       	rjmp	.+278    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     440:	9a 01       	movw	r18, r20
     442:	ad ec       	ldi	r26, 0xCD	; 205
     444:	bc ec       	ldi	r27, 0xCC	; 204
     446:	c8 d6       	rcall	.+3472   	; 0x11d8 <__umulhisi3>
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	9c 01       	movw	r18, r24
     456:	22 0f       	add	r18, r18
     458:	33 1f       	adc	r19, r19
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	9a 01       	movw	r18, r20
     46c:	28 1b       	sub	r18, r24
     46e:	39 0b       	sbc	r19, r25
     470:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <Coin_n1>
        Coin_n10 = (Coin_Total / 10) % 10; //두번째 자리 취득 
     474:	9a 01       	movw	r18, r20
     476:	b0 d6       	rcall	.+3424   	; 0x11d8 <__umulhisi3>
     478:	ec 01       	movw	r28, r24
     47a:	d6 95       	lsr	r29
     47c:	c7 95       	ror	r28
     47e:	d6 95       	lsr	r29
     480:	c7 95       	ror	r28
     482:	d6 95       	lsr	r29
     484:	c7 95       	ror	r28
     486:	9e 01       	movw	r18, r28
     488:	a7 d6       	rcall	.+3406   	; 0x11d8 <__umulhisi3>
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	9c 01       	movw	r18, r24
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	82 0f       	add	r24, r18
     4aa:	93 1f       	adc	r25, r19
     4ac:	9e 01       	movw	r18, r28
     4ae:	28 1b       	sub	r18, r24
     4b0:	39 0b       	sbc	r19, r25
     4b2:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <Coin_n10>
        Coin_n100 = (Coin_Total / 100) % 10; //세번째 자리 취득 
     4b6:	9a 01       	movw	r18, r20
     4b8:	36 95       	lsr	r19
     4ba:	27 95       	ror	r18
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	ab e7       	ldi	r26, 0x7B	; 123
     4c2:	b4 e1       	ldi	r27, 0x14	; 20
     4c4:	89 d6       	rcall	.+3346   	; 0x11d8 <__umulhisi3>
     4c6:	ec 01       	movw	r28, r24
     4c8:	d6 95       	lsr	r29
     4ca:	c7 95       	ror	r28
     4cc:	9e 01       	movw	r18, r28
     4ce:	ad ec       	ldi	r26, 0xCD	; 205
     4d0:	bc ec       	ldi	r27, 0xCC	; 204
     4d2:	82 d6       	rcall	.+3332   	; 0x11d8 <__umulhisi3>
     4d4:	96 95       	lsr	r25
     4d6:	87 95       	ror	r24
     4d8:	96 95       	lsr	r25
     4da:	87 95       	ror	r24
     4dc:	96 95       	lsr	r25
     4de:	87 95       	ror	r24
     4e0:	9c 01       	movw	r18, r24
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	9e 01       	movw	r18, r28
     4f8:	28 1b       	sub	r18, r24
     4fa:	39 0b       	sbc	r19, r25
     4fc:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <Coin_n100>
        Coin_n1000 = (Coin_Total / 1000) % 10; //네번째 자리 취득 
     500:	9a 01       	movw	r18, r20
     502:	36 95       	lsr	r19
     504:	27 95       	ror	r18
     506:	36 95       	lsr	r19
     508:	27 95       	ror	r18
     50a:	36 95       	lsr	r19
     50c:	27 95       	ror	r18
     50e:	a5 ec       	ldi	r26, 0xC5	; 197
     510:	b0 e2       	ldi	r27, 0x20	; 32
     512:	62 d6       	rcall	.+3268   	; 0x11d8 <__umulhisi3>
     514:	ac 01       	movw	r20, r24
     516:	52 95       	swap	r21
     518:	42 95       	swap	r20
     51a:	4f 70       	andi	r20, 0x0F	; 15
     51c:	45 27       	eor	r20, r21
     51e:	5f 70       	andi	r21, 0x0F	; 15
     520:	45 27       	eor	r20, r21
     522:	9a 01       	movw	r18, r20
     524:	ad ec       	ldi	r26, 0xCD	; 205
     526:	bc ec       	ldi	r27, 0xCC	; 204
     528:	57 d6       	rcall	.+3246   	; 0x11d8 <__umulhisi3>
     52a:	96 95       	lsr	r25
     52c:	87 95       	ror	r24
     52e:	96 95       	lsr	r25
     530:	87 95       	ror	r24
     532:	96 95       	lsr	r25
     534:	87 95       	ror	r24
     536:	9c 01       	movw	r18, r24
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	82 0f       	add	r24, r18
     54a:	93 1f       	adc	r25, r19
     54c:	9a 01       	movw	r18, r20
     54e:	28 1b       	sub	r18, r24
     550:	39 0b       	sbc	r19, r25
     552:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <Coin_n1000>
    }

    PD0_status_old = PD0_status;
     556:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <PD0_status_old.2164>
    PD1_status_old = PD1_status;
     55a:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <PD1_status_old.2165>
    PD2_status_old = PD2_status;
    PD3_status_old = PD3_status;
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <Vending_Machine_Mode>:

void Vending_Machine_Mode(void)
{
    static uint16_t Coin_Total_Old;
    switch(Vending_Machine_status)
     564:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <Vending_Machine_status>
     568:	8e 2f       	mov	r24, r30
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	87 30       	cpi	r24, 0x07	; 7
     56e:	91 05       	cpc	r25, r1
     570:	08 f0       	brcs	.+2      	; 0x574 <Vending_Machine_Mode+0x10>
     572:	ab c0       	rjmp	.+342    	; 0x6ca <Vending_Machine_Mode+0x166>
     574:	fc 01       	movw	r30, r24
     576:	ea 5b       	subi	r30, 0xBA	; 186
     578:	ff 4f       	sbci	r31, 0xFF	; 255
     57a:	25 c6       	rjmp	.+3146   	; 0x11c6 <__tablejump2__>
    {
        case VENDING_MACHINE_IDLE :
            if(Coin_Total > 0)
     57c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <Coin_Total>
     580:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <Coin_Total+0x1>
     584:	89 2b       	or	r24, r25
     586:	09 f4       	brne	.+2      	; 0x58a <Vending_Machine_Mode+0x26>
     588:	a0 c0       	rjmp	.+320    	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_INSERT_COIN; //코인 입력이 들어왔을 경우 Insert Coin 모드로 변경
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     590:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_INSERT_COIN :
            if((Keypad_Num > '0')&&(Keypad_Num < '9'))
     592:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     596:	9f ec       	ldi	r25, 0xCF	; 207
     598:	98 0f       	add	r25, r24
     59a:	98 30       	cpi	r25, 0x08	; 8
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <Vending_Machine_Mode+0x3c>
     59e:	95 c0       	rjmp	.+298    	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Selected_Num = Keypad_Num - 0x30; // ASCII -> 숫자로 변환
     5a0:	80 53       	subi	r24, 0x30	; 48
     5a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Selected_Num>
                Vending_Machine_status = VENDING_MACHINE_SELECT_ITEM; //'0~8' 키패드 버튼이 들어왔을 경우, Select Item 모드로 변경
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
                Coin_Inserted = Coin_Total;
     5ac:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <Coin_Total>
     5b0:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <Coin_Total+0x1>
     5b4:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <Coin_Inserted+0x1>
     5b8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Coin_Inserted>
     5bc:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_SELECT_ITEM : 
            if(Keypad_Num == '9')//'A')
     5be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     5c2:	89 33       	cpi	r24, 0x39	; 57
     5c4:	21 f4       	brne	.+8      	; 0x5ce <Vending_Machine_Mode+0x6a>
            {
                Vending_Machine_status = VENDING_MACHINE_ITEM_SELECTED; //'A' 키패드 버튼이 들어왔을 경우, Select Item 모드로 변경
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     5cc:	08 95       	ret
            }
            else if(Keypad_Num == '0')//'D')
     5ce:	80 33       	cpi	r24, 0x30	; 48
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <Vending_Machine_Mode+0x70>
     5d2:	7b c0       	rjmp	.+246    	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     5da:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_ITEM_SELECTED :
            if((Coin_Inserted < Vending_Machine_Price[Selected_Num - 1])&&(Melody_status == MELODY_STATUS_FINISHED)&&(Selected_item_flag==1))
     5dc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <Selected_Num>
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ef 5e       	subi	r30, 0xEF	; 239
     5ea:	fe 4f       	sbci	r31, 0xFE	; 254
     5ec:	20 81       	ld	r18, Z
     5ee:	31 81       	ldd	r19, Z+1	; 0x01
     5f0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Coin_Inserted>
     5f4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <Coin_Inserted+0x1>
     5f8:	82 17       	cp	r24, r18
     5fa:	93 07       	cpc	r25, r19
     5fc:	60 f4       	brcc	.+24     	; 0x616 <Vending_Machine_Mode+0xb2>
     5fe:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <Melody_status>
     602:	48 30       	cpi	r20, 0x08	; 8
     604:	41 f4       	brne	.+16     	; 0x616 <Vending_Machine_Mode+0xb2>
     606:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     60a:	41 30       	cpi	r20, 0x01	; 1
     60c:	21 f4       	brne	.+8      	; 0x616 <Vending_Machine_Mode+0xb2>
            {
                Vending_Machine_status = VENDING_MACHINE_MONEY_ERROR;
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     614:	08 95       	ret
            }            
            else if(Keypad_Num == '0')//'D')
     616:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Keypad_Num>
     61a:	40 33       	cpi	r20, 0x30	; 48
     61c:	21 f4       	brne	.+8      	; 0x626 <Vending_Machine_Mode+0xc2>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     624:	08 95       	ret
            }
            else
            {
                if(Selected_item_flag == 1)
     626:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     62a:	41 30       	cpi	r20, 0x01	; 1
     62c:	41 f4       	brne	.+16     	; 0x63e <Vending_Machine_Mode+0xda>
                {
                    Coin_Inserted = Coin_Inserted - Vending_Machine_Price[Selected_Num - 1];
     62e:	82 1b       	sub	r24, r18
     630:	93 0b       	sbc	r25, r19
     632:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <Coin_Inserted+0x1>
     636:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Coin_Inserted>
                    Selected_item_flag = 0;
     63a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                }

                if((Coin_Inserted == 0)&&(Melody_status == MELODY_STATUS_FINISHED))
     63e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Coin_Inserted>
     642:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <Coin_Inserted+0x1>
     646:	89 2b       	or	r24, r25
     648:	09 f0       	breq	.+2      	; 0x64c <Vending_Machine_Mode+0xe8>
     64a:	3f c0       	rjmp	.+126    	; 0x6ca <Vending_Machine_Mode+0x166>
     64c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     650:	88 30       	cpi	r24, 0x08	; 8
     652:	d9 f5       	brne	.+118    	; 0x6ca <Vending_Machine_Mode+0x166>
                {
                    Vending_Machine_status = VENDING_MACHINE_MONEY_FINISH;
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     65a:	08 95       	ret
                }
            }
        break;
        case VENDING_MACHINE_MONEY_ERROR :
            if(Keypad_Num == '0')//'D')
     65c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Keypad_Num>
     660:	80 33       	cpi	r24, 0x30	; 48
     662:	99 f5       	brne	.+102    	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_CANCEL; //'D' 키패드 버튼이 입력될 경우, Cancel 모드로 변경
     664:	86 e0       	ldi	r24, 0x06	; 6
     666:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Vending_Machine_status>
     66a:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_MONEY_FINISH :
            if(Melody_status == MELODY_STATUS_FINISHED)
     66c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     670:	88 30       	cpi	r24, 0x08	; 8
     672:	59 f5       	brne	.+86     	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_IDLE;
     674:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Vending_Machine_status>
                Melody_status = MELODY_STATUS_START;
     678:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Melody_status>
                Selected_item_flag = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                Coin_Total = 0;
     682:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <Coin_Total+0x1>
     686:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <Coin_Total>
                Coin_100 = 0;
     68a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <Coin_100>
                Coin_500 = 0;
     68e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <Coin_500>
                Coin_1000 = 0; 
     692:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <Coin_1000>
                Coin_5000 = 0;;
     696:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Coin_5000>
     69a:	08 95       	ret
            }
        break;
        case VENDING_MACHINE_CANCEL :
            if(Melody_status == MELODY_STATUS_FINISHED)
     69c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     6a0:	88 30       	cpi	r24, 0x08	; 8
     6a2:	99 f4       	brne	.+38     	; 0x6ca <Vending_Machine_Mode+0x166>
            {
                Vending_Machine_status = VENDING_MACHINE_IDLE;
     6a4:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Vending_Machine_status>
                Melody_status = MELODY_STATUS_START;
     6a8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Melody_status>
                Selected_item_flag = 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                Coin_Total = 0;
     6b2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <Coin_Total+0x1>
     6b6:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <Coin_Total>
                Coin_100 = 0;
     6ba:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <Coin_100>
                Coin_500 = 0;
     6be:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <Coin_500>
                Coin_1000 = 0; 
     6c2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <Coin_1000>
                Coin_5000 = 0;;
     6c6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <Coin_5000>
     6ca:	08 95       	ret

000006cc <Melody_Update>:

}

void Melody_Update(void)
{
    switch(Vending_Machine_status)
     6cc:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Vending_Machine_status>
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <Melody_Update+0xa>
     6d4:	84 c0       	rjmp	.+264    	; 0x7de <Melody_Update+0x112>
     6d6:	18 f4       	brcc	.+6      	; 0x6de <Melody_Update+0x12>
     6d8:	83 30       	cpi	r24, 0x03	; 3
     6da:	41 f0       	breq	.+16     	; 0x6ec <Melody_Update+0x20>
     6dc:	a6 c2       	rjmp	.+1356   	; 0xc2a <Melody_Update+0x55e>
     6de:	85 30       	cpi	r24, 0x05	; 5
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <Melody_Update+0x18>
     6e2:	d9 c0       	rjmp	.+434    	; 0x896 <Melody_Update+0x1ca>
     6e4:	86 30       	cpi	r24, 0x06	; 6
     6e6:	09 f4       	brne	.+2      	; 0x6ea <Melody_Update+0x1e>
     6e8:	bc c1       	rjmp	.+888    	; 0xa62 <Melody_Update+0x396>
     6ea:	9f c2       	rjmp	.+1342   	; 0xc2a <Melody_Update+0x55e>
    {
        case VENDING_MACHINE_ITEM_SELECTED :
            switch(Melody_status)
     6ec:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	89 f1       	breq	.+98     	; 0x756 <Melody_Update+0x8a>
     6f4:	28 f4       	brcc	.+10     	; 0x700 <Melody_Update+0x34>
     6f6:	88 23       	and	r24, r24
     6f8:	51 f0       	breq	.+20     	; 0x70e <Melody_Update+0x42>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	81 f0       	breq	.+32     	; 0x71e <Melody_Update+0x52>
     6fe:	69 c0       	rjmp	.+210    	; 0x7d2 <Melody_Update+0x106>
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	09 f4       	brne	.+2      	; 0x706 <Melody_Update+0x3a>
     704:	44 c0       	rjmp	.+136    	; 0x78e <Melody_Update+0xc2>
     706:	88 30       	cpi	r24, 0x08	; 8
     708:	09 f4       	brne	.+2      	; 0x70c <Melody_Update+0x40>
     70a:	5d c0       	rjmp	.+186    	; 0x7c6 <Melody_Update+0xfa>
     70c:	62 c0       	rjmp	.+196    	; 0x7d2 <Melody_Update+0x106>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_DO;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
                    Melody_timer = 0;
     714:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     718:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                break;
     71c:	08 95       	ret
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     71e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     722:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     726:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     72a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     72e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     732:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     73c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     740:	c2 97       	sbiw	r24, 0x32	; 50
     742:	08 f4       	brcc	.+2      	; 0x746 <Melody_Update+0x7a>
     744:	77 c2       	rjmp	.+1262   	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     746:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     74a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     754:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     756:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     75a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     75e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     762:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     766:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     76a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     774:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     778:	c2 97       	sbiw	r24, 0x32	; 50
     77a:	08 f4       	brcc	.+2      	; 0x77e <Melody_Update+0xb2>
     77c:	5b c2       	rjmp	.+1206   	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     77e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     782:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     786:	85 e0       	ldi	r24, 0x05	; 5
     788:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     78c:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     78e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     792:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     796:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     79a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     79e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     7a2:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     7ac:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     7b0:	c2 97       	sbiw	r24, 0x32	; 50
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <Melody_Update+0xea>
     7b4:	3f c2       	rjmp	.+1150   	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     7b6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     7ba:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     7c4:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    //Melody_status = MELODY_STATUS_START;
                    cbi(PORTG,4); // PG4 출력 차단
     7c6:	e5 e6       	ldi	r30, 0x65	; 101
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	8f 7e       	andi	r24, 0xEF	; 239
     7ce:	80 83       	st	Z, r24
                break;
     7d0:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     7d2:	e5 e6       	ldi	r30, 0x65	; 101
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	8f 7e       	andi	r24, 0xEF	; 239
     7da:	80 83       	st	Z, r24
                break;
     7dc:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_MONEY_ERROR :
            switch(Melody_status)
     7de:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	91 f0       	breq	.+36     	; 0x80a <Melody_Update+0x13e>
     7e6:	18 f4       	brcc	.+6      	; 0x7ee <Melody_Update+0x122>
     7e8:	88 23       	and	r24, r24
     7ea:	39 f0       	breq	.+14     	; 0x7fa <Melody_Update+0x12e>
     7ec:	4e c0       	rjmp	.+156    	; 0x88a <Melody_Update+0x1be>
     7ee:	87 30       	cpi	r24, 0x07	; 7
     7f0:	41 f1       	breq	.+80     	; 0x842 <Melody_Update+0x176>
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <Melody_Update+0x12c>
     7f6:	41 c0       	rjmp	.+130    	; 0x87a <Melody_Update+0x1ae>
     7f8:	48 c0       	rjmp	.+144    	; 0x88a <Melody_Update+0x1be>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_MI;
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
                    Melody_timer = 0;
     800:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     804:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                break;
     808:	08 95       	ret
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     80a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     80e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     812:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     816:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     81a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     81e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     828:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     82c:	c2 97       	sbiw	r24, 0x32	; 50
     82e:	08 f4       	brcc	.+2      	; 0x832 <Melody_Update+0x166>
     830:	01 c2       	rjmp	.+1026   	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     832:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     836:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_SI;
     83a:	87 e0       	ldi	r24, 0x07	; 7
     83c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     840:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     842:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     846:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     84a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     84e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     852:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     856:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     860:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     864:	c2 97       	sbiw	r24, 0x32	; 50
     866:	08 f4       	brcc	.+2      	; 0x86a <Melody_Update+0x19e>
     868:	e5 c1       	rjmp	.+970    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     86a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     86e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     872:	88 e0       	ldi	r24, 0x08	; 8
     874:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     878:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     87a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     87e:	e5 e6       	ldi	r30, 0x65	; 101
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	8f 7e       	andi	r24, 0xEF	; 239
     886:	80 83       	st	Z, r24
                break;
     888:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     88a:	e5 e6       	ldi	r30, 0x65	; 101
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	8f 7e       	andi	r24, 0xEF	; 239
     892:	80 83       	st	Z, r24
                break;
     894:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_MONEY_FINISH :
            switch(Melody_status)
     896:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <Melody_status>
     89a:	8e 2f       	mov	r24, r30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	89 30       	cpi	r24, 0x09	; 9
     8a0:	91 05       	cpc	r25, r1
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <Melody_Update+0x1da>
     8a4:	d8 c0       	rjmp	.+432    	; 0xa56 <Melody_Update+0x38a>
     8a6:	fc 01       	movw	r30, r24
     8a8:	e3 5b       	subi	r30, 0xB3	; 179
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	8c c4       	rjmp	.+2328   	; 0x11c6 <__tablejump2__>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_SI;
     8ae:	87 e0       	ldi	r24, 0x07	; 7
     8b0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
                    Melody_timer = 0;
     8b4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     8b8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                break;
     8bc:	08 95       	ret
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     8be:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     8c2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     8c6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8ca:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     8ce:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     8d2:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     8dc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     8e0:	c2 97       	sbiw	r24, 0x32	; 50
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <Melody_Update+0x21a>
     8e4:	a7 c1       	rjmp	.+846    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     8e6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     8ea:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_LA;
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     8f4:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_LA:
                    OCR3A = Melody_value[MELODY_STATUS_LA-1];
     8f6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Melody_value+0xa>
     8fa:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Melody_value+0xb>
     8fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     902:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     906:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     90a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     914:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     918:	c2 97       	sbiw	r24, 0x32	; 50
     91a:	08 f4       	brcc	.+2      	; 0x91e <Melody_Update+0x252>
     91c:	8b c1       	rjmp	.+790    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     91e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     922:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     926:	85 e0       	ldi	r24, 0x05	; 5
     928:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     92c:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     92e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     932:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     936:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     93a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     93e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     942:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     94c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     950:	c2 97       	sbiw	r24, 0x32	; 50
     952:	08 f4       	brcc	.+2      	; 0x956 <Melody_Update+0x28a>
     954:	6f c1       	rjmp	.+734    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     956:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     95a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FA;
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     964:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FA:
                    OCR3A = Melody_value[MELODY_STATUS_FA-1];
     966:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Melody_value+0x6>
     96a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Melody_value+0x7>
     96e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     972:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     976:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     97a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     984:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     988:	c2 97       	sbiw	r24, 0x32	; 50
     98a:	08 f4       	brcc	.+2      	; 0x98e <Melody_Update+0x2c2>
     98c:	53 c1       	rjmp	.+678    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     98e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     992:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     99c:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     99e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     9a2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     9a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     9ae:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     9b2:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     9bc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     9c0:	c2 97       	sbiw	r24, 0x32	; 50
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <Melody_Update+0x2fa>
     9c4:	37 c1       	rjmp	.+622    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     9c6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     9ca:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_RE;
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     9d4:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_RE:
                    OCR3A = Melody_value[MELODY_STATUS_RE-1];
     9d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Melody_value+0x2>
     9da:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Melody_value+0x3>
     9de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     9e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     9e6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     9ea:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     9f4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     9f8:	c2 97       	sbiw	r24, 0x32	; 50
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <Melody_Update+0x332>
     9fc:	1b c1       	rjmp	.+566    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     9fe:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     a02:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_DO;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     a0c:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     a0e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     a12:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     a16:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a1a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     a1e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     a22:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     a2c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     a30:	c2 97       	sbiw	r24, 0x32	; 50
     a32:	08 f4       	brcc	.+2      	; 0xa36 <Melody_Update+0x36a>
     a34:	ff c0       	rjmp	.+510    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     a36:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     a3a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     a3e:	88 e0       	ldi	r24, 0x08	; 8
     a40:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     a44:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     a46:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     a4a:	e5 e6       	ldi	r30, 0x65	; 101
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	8f 7e       	andi	r24, 0xEF	; 239
     a52:	80 83       	st	Z, r24
                break;
     a54:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     a56:	e5 e6       	ldi	r30, 0x65	; 101
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 7e       	andi	r24, 0xEF	; 239
     a5e:	80 83       	st	Z, r24
                break;
     a60:	08 95       	ret
            }
        break;        
        case VENDING_MACHINE_CANCEL :
            switch(Melody_status)
     a62:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <Melody_status>
     a66:	8e 2f       	mov	r24, r30
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	89 30       	cpi	r24, 0x09	; 9
     a6c:	91 05       	cpc	r25, r1
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <Melody_Update+0x3a6>
     a70:	d6 c0       	rjmp	.+428    	; 0xc1e <Melody_Update+0x552>
     a72:	fc 01       	movw	r30, r24
     a74:	ea 5a       	subi	r30, 0xAA	; 170
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	a6 c3       	rjmp	.+1868   	; 0x11c6 <__tablejump2__>
            {
                case MELODY_STATUS_START : 
                    Melody_status = MELODY_STATUS_DO;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
                    Melody_timer = 0;
     a80:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     a84:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                break;
     a88:	08 95       	ret
                case MELODY_STATUS_DO:
                    OCR3A = Melody_value[MELODY_STATUS_DO-1];
     a8a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Melody_value>
     a8e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Melody_value+0x1>
     a92:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a96:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     a9a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     a9e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     aa8:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     aac:	c2 97       	sbiw	r24, 0x32	; 50
     aae:	08 f4       	brcc	.+2      	; 0xab2 <Melody_Update+0x3e6>
     ab0:	c1 c0       	rjmp	.+386    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     ab2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     ab6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_RE;
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     ac0:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_RE:
                    OCR3A = Melody_value[MELODY_STATUS_RE-1];
     ac2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Melody_value+0x2>
     ac6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Melody_value+0x3>
     aca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ace:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     ad2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     ad6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     ae0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     ae4:	c2 97       	sbiw	r24, 0x32	; 50
     ae6:	08 f4       	brcc	.+2      	; 0xaea <Melody_Update+0x41e>
     ae8:	a5 c0       	rjmp	.+330    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     aea:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     aee:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_MI;
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     af8:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_MI:
                    OCR3A = Melody_value[MELODY_STATUS_MI-1];
     afa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Melody_value+0x4>
     afe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Melody_value+0x5>
     b02:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b06:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b0a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     b0e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     b18:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     b1c:	c2 97       	sbiw	r24, 0x32	; 50
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <Melody_Update+0x456>
     b20:	89 c0       	rjmp	.+274    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b22:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     b26:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FA;
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     b30:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FA:
                    OCR3A = Melody_value[MELODY_STATUS_FA-1];
     b32:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Melody_value+0x6>
     b36:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Melody_value+0x7>
     b3a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b3e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b42:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     b46:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     b50:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     b54:	c2 97       	sbiw	r24, 0x32	; 50
     b56:	08 f4       	brcc	.+2      	; 0xb5a <Melody_Update+0x48e>
     b58:	6d c0       	rjmp	.+218    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b5a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     b5e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_SOL;
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     b68:	08 95       	ret
                    }
                break;                
                case MELODY_STATUS_SOL:
                    OCR3A = Melody_value[MELODY_STATUS_SOL-1];
     b6a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Melody_value+0x8>
     b6e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Melody_value+0x9>
     b72:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b76:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     b7a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     b7e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     b88:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     b8c:	c2 97       	sbiw	r24, 0x32	; 50
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <Melody_Update+0x4c6>
     b90:	51 c0       	rjmp	.+162    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     b92:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     b96:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_LA;
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     ba0:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_LA:
                    OCR3A = Melody_value[MELODY_STATUS_LA-1];
     ba2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Melody_value+0xa>
     ba6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Melody_value+0xb>
     baa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     bae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     bb2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     bb6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     bc0:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     bc4:	c2 97       	sbiw	r24, 0x32	; 50
     bc6:	b0 f1       	brcs	.+108    	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     bc8:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     bcc:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_SI;
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     bd6:	08 95       	ret
                    }
                break;              
                case MELODY_STATUS_SI:
                    OCR3A = Melody_value[MELODY_STATUS_SI-1];
     bd8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Melody_value+0xc>
     bdc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Melody_value+0xd>
     be0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     be4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
                    Melody_timer++;
     be8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Melody_timer>
     bec:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Melody_timer+0x1>
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <Melody_timer+0x1>
     bf6:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <Melody_timer>
                    if(Melody_timer>=50)
     bfa:	c2 97       	sbiw	r24, 0x32	; 50
     bfc:	d8 f0       	brcs	.+54     	; 0xc34 <Melody_Update+0x568>
                    {
                        Melody_timer = 0;
     bfe:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Melody_timer+0x1>
     c02:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <Melody_timer>
                        Melody_status = MELODY_STATUS_FINISHED;
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Melody_status>
     c0c:	08 95       	ret
                    }
                break;
                case MELODY_STATUS_FINISHED:
                    Melody_status = MELODY_STATUS_START;
     c0e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Melody_status>
                    cbi(PORTG,4); // PG4 출력 차단
     c12:	e5 e6       	ldi	r30, 0x65	; 101
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8f 7e       	andi	r24, 0xEF	; 239
     c1a:	80 83       	st	Z, r24
                break;
     c1c:	08 95       	ret
                default :
                    cbi(PORTG,4); // PG4 출력 차단
     c1e:	e5 e6       	ldi	r30, 0x65	; 101
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7e       	andi	r24, 0xEF	; 239
     c26:	80 83       	st	Z, r24
                break;
     c28:	08 95       	ret
            }
        break;
        default :
            cbi(PORTG,4); // PG4 출력 차단
     c2a:	e5 e6       	ldi	r30, 0x65	; 101
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8f 7e       	andi	r24, 0xEF	; 239
     c32:	80 83       	st	Z, r24
     c34:	08 95       	ret

00000c36 <Clear_Tx_Buffer>:
    }
}

void Clear_Tx_Buffer(void)
{
    for(uint8_t i = 0;i<32;i++)
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <Clear_Tx_Buffer+0x12>
    {
        LCD_Tx_Data[i] = ' ';
     c3a:	e8 2f       	mov	r30, r24
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	e2 56       	subi	r30, 0x62	; 98
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	90 e2       	ldi	r25, 0x20	; 32
     c44:	90 83       	st	Z, r25
    }
}

void Clear_Tx_Buffer(void)
{
    for(uint8_t i = 0;i<32;i++)
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 32       	cpi	r24, 0x20	; 32
     c4a:	b8 f3       	brcs	.-18     	; 0xc3a <Clear_Tx_Buffer+0x4>
    {
        LCD_Tx_Data[i] = ' ';
    }
}
     c4c:	08 95       	ret

00000c4e <LCD_Transmit_Command>:

void LCD_Transmit_Command(char cmd)
{
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
     c4e:	e5 e6       	ldi	r30, 0x65	; 101
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	90 81       	ld	r25, Z
     c54:	9b 7f       	andi	r25, 0xFB	; 251
     c56:	90 83       	st	Z, r25
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
     c58:	90 81       	ld	r25, Z
     c5a:	9d 7f       	andi	r25, 0xFD	; 253
     c5c:	90 83       	st	Z, r25
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
     c5e:	90 81       	ld	r25, Z
     c60:	91 60       	ori	r25, 0x01	; 1
     c62:	90 83       	st	Z, r25
     c64:	95 e0       	ldi	r25, 0x05	; 5
     c66:	9a 95       	dec	r25
     c68:	f1 f7       	brne	.-4      	; 0xc66 <LCD_Transmit_Command+0x18>
	_delay_us(1);
	PORTA = cmd;          // 명령 출력
     c6a:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	80 83       	st	Z, r24
     c72:	85 e0       	ldi	r24, 0x05	; 5
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCD_Transmit_Command+0x26>
     c78:	08 95       	ret

00000c7a <LCD_Init>:
    DDRD = 0x00;
}

void LCD_Init(void)
{
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     c7a:	88 e3       	ldi	r24, 0x38	; 56
     c7c:	e8 df       	rcall	.-48     	; 0xc4e <LCD_Transmit_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c7e:	86 e6       	ldi	r24, 0x66	; 102
     c80:	9e e0       	ldi	r25, 0x0E	; 14
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <LCD_Init+0x8>
     c86:	00 00       	nop
	_delay_ms(1);		
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     c88:	88 e3       	ldi	r24, 0x38	; 56
     c8a:	e1 df       	rcall	.-62     	; 0xc4e <LCD_Transmit_Command>
     c8c:	86 e6       	ldi	r24, 0x66	; 102
     c8e:	9e e0       	ldi	r25, 0x0E	; 14
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <LCD_Init+0x16>
	_delay_ms(1);	
	LCD_Transmit_Command(0x38); // Function Set , 2-Line Mode
     c94:	00 00       	nop
     c96:	88 e3       	ldi	r24, 0x38	; 56
     c98:	da df       	rcall	.-76     	; 0xc4e <LCD_Transmit_Command>
     c9a:	86 e6       	ldi	r24, 0x66	; 102
     c9c:	9e e0       	ldi	r25, 0x0E	; 14
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <LCD_Init+0x24>
	_delay_ms(1);	
	LCD_Transmit_Command(0x0C); // Display ON
     ca2:	00 00       	nop
     ca4:	8c e0       	ldi	r24, 0x0C	; 12
     ca6:	d3 df       	rcall	.-90     	; 0xc4e <LCD_Transmit_Command>
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	9f e8       	ldi	r25, 0x8F	; 143
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCD_Init+0x32>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <LCD_Init+0x38>
	_delay_ms(10);
	LCD_Transmit_Command(0x06); // Increment Mode
     cb2:	00 00       	nop
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	cb df       	rcall	.-106    	; 0xc4e <LCD_Transmit_Command>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	9f e8       	ldi	r25, 0x8F	; 143
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LCD_Init+0x42>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <LCD_Init+0x48>
	_delay_ms(10);
	LCD_Transmit_Command(0x01); // Display Clear
     cc2:	00 00       	nop
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	c3 df       	rcall	.-122    	; 0xc4e <LCD_Transmit_Command>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f e8       	ldi	r25, 0x8F	; 143
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <LCD_Init+0x52>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <LCD_Init+0x58>
     cd2:	00 00       	nop
     cd4:	08 95       	ret

00000cd6 <LCD_Cursor>:
	_delay_us(1);
}

void LCD_Cursor(char col, char row)
{
	LCD_Transmit_Command(0x80 | (row + col * 0x40));
     cd6:	90 e4       	ldi	r25, 0x40	; 64
     cd8:	89 9f       	mul	r24, r25
     cda:	60 0d       	add	r22, r0
     cdc:	11 24       	eor	r1, r1
     cde:	86 2f       	mov	r24, r22
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	b5 cf       	rjmp	.-150    	; 0xc4e <LCD_Transmit_Command>
     ce4:	08 95       	ret

00000ce6 <LCD_Transmit_Data>:
}

void LCD_Transmit_Data(char data)
{
	sbi(LCD_CON, LCD_RS);
     ce6:	e5 e6       	ldi	r30, 0x65	; 101
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	90 81       	ld	r25, Z
     cec:	94 60       	ori	r25, 0x04	; 4
     cee:	90 83       	st	Z, r25
	cbi(LCD_CON, LCD_RW);
     cf0:	90 81       	ld	r25, Z
     cf2:	9d 7f       	andi	r25, 0xFD	; 253
     cf4:	90 83       	st	Z, r25
	sbi(LCD_CON, LCD_E);
     cf6:	90 81       	ld	r25, Z
     cf8:	91 60       	ori	r25, 0x01	; 1
     cfa:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	9a 95       	dec	r25
     d00:	f1 f7       	brne	.-4      	; 0xcfe <LCD_Transmit_Data+0x18>
	_delay_us(1);
	LCD_DATA = data;
     d02:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_CON, LCD_E);
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	80 83       	st	Z, r24
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	8a 95       	dec	r24
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_Transmit_Data+0x26>
     d10:	08 95       	ret

00000d12 <Seven_Segment_Output>:

void Seven_Segment_Output(void)
{
    static uint8_t counter;

    counter++;
     d12:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <counter.2278>
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <counter.2278>
    if(counter>=4)
     d1c:	84 30       	cpi	r24, 0x04	; 4
     d1e:	10 f0       	brcs	.+4      	; 0xd24 <Seven_Segment_Output+0x12>
    {
        counter = 0;
     d20:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <counter.2278>
    }
    
    switch(Vending_Machine_status)
     d24:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Vending_Machine_status>
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	18 f4       	brcc	.+6      	; 0xd32 <Seven_Segment_Output+0x20>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	20 f0       	brcs	.+8      	; 0xd38 <Seven_Segment_Output+0x26>
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <Seven_Segment_Output+0x32>
     d32:	85 30       	cpi	r24, 0x05	; 5
     d34:	39 f0       	breq	.+14     	; 0xd44 <Seven_Segment_Output+0x32>
     d36:	38 c0       	rjmp	.+112    	; 0xda8 <Seven_Segment_Output+0x96>
    {
        case VENDING_MACHINE_IDLE :
            PORTE = 0xF0; // Seven Segment 선택 FND0~3
     d38:	80 ef       	ldi	r24, 0xF0	; 240
     d3a:	83 b9       	out	0x03, r24	; 3
            PORTB = Seven_Segment_Num[10]; //- - - - 출력
     d3c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Seven_Segment_Num+0xa>
     d40:	88 bb       	out	0x18, r24	; 24
        break;
     d42:	08 95       	ret
        case VENDING_MACHINE_INSERT_COIN :
        case VENDING_MACHINE_SELECT_ITEM :
        case VENDING_MACHINE_ITEM_SELECTED :
        case VENDING_MACHINE_MONEY_FINISH :
            switch(counter)
     d44:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <counter.2278>
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	81 f0       	breq	.+32     	; 0xd6c <Seven_Segment_Output+0x5a>
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <Seven_Segment_Output+0x46>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	b9 f0       	breq	.+46     	; 0xd80 <Seven_Segment_Output+0x6e>
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	f9 f0       	breq	.+62     	; 0xd94 <Seven_Segment_Output+0x82>
     d56:	08 95       	ret
            {
                case SEVEN_SEGMENT_0 :
                    PORTE = 0x10; //FND0 선택
     d58:	80 e1       	ldi	r24, 0x10	; 16
     d5a:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n1]; //첫번째 자리 출력
     d5c:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <Coin_n1>
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	e7 5d       	subi	r30, 0xD7	; 215
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	80 81       	ld	r24, Z
     d68:	88 bb       	out	0x18, r24	; 24
                break;
     d6a:	08 95       	ret
                case SEVEN_SEGMENT_1 :
                    PORTE = 0x20; //FND1 선택
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n10]; //두번째 자리 출력
     d70:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <Coin_n10>
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e7 5d       	subi	r30, 0xD7	; 215
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	80 81       	ld	r24, Z
     d7c:	88 bb       	out	0x18, r24	; 24
                break;
     d7e:	08 95       	ret
                case SEVEN_SEGMENT_2 :
                    PORTE = 0x40; //FND2 선택
     d80:	80 e4       	ldi	r24, 0x40	; 64
     d82:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n100]; //세번째 자리 출력
     d84:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <Coin_n100>
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	e7 5d       	subi	r30, 0xD7	; 215
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	88 bb       	out	0x18, r24	; 24
                break;
     d92:	08 95       	ret
                case SEVEN_SEGMENT_3 :
                    PORTE = 0x80; //FND3 선택
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	83 b9       	out	0x03, r24	; 3
                    PORTB = Seven_Segment_Num[Coin_n1000]; //네번째 자리 출력
     d98:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Coin_n1000>
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e7 5d       	subi	r30, 0xD7	; 215
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	80 81       	ld	r24, Z
     da4:	88 bb       	out	0x18, r24	; 24
                break;
     da6:	08 95       	ret
                default :
                break;
            }
        break;
        default :
            PORTB = 0xFF;
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	88 bb       	out	0x18, r24	; 24
     dac:	08 95       	ret

00000dae <LED_Output>:
    }
}

void LED_Output(void)
{
    for(uint8_t i = 0;i<8;i++)
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	24 c0       	rjmp	.+72     	; 0xdfa <LED_Output+0x4c>
    {
        if(Vending_Machine_Count[i]>0)
     db2:	e8 2f       	mov	r30, r24
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ef 5d       	subi	r30, 0xDF	; 223
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	90 81       	ld	r25, Z
     dbc:	99 23       	and	r25, r25
     dbe:	71 f0       	breq	.+28     	; 0xddc <LED_Output+0x2e>
        {
            sbi(PORTF,i);
     dc0:	e2 e6       	ldi	r30, 0x62	; 98
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	90 81       	ld	r25, Z
     dc6:	21 e0       	ldi	r18, 0x01	; 1
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	08 2e       	mov	r0, r24
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <LED_Output+0x24>
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <LED_Output+0x20>
     dd6:	29 2b       	or	r18, r25
     dd8:	20 83       	st	Z, r18
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <LED_Output+0x4a>
        }
        else
        {
            cbi(PORTF,i);
     ddc:	e2 e6       	ldi	r30, 0x62	; 98
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	90 81       	ld	r25, Z
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	08 2e       	mov	r0, r24
     de8:	02 c0       	rjmp	.+4      	; 0xdee <LED_Output+0x40>
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <LED_Output+0x3c>
     df2:	20 95       	com	r18
     df4:	29 23       	and	r18, r25
     df6:	20 83       	st	Z, r18
    }
}

void LED_Output(void)
{
    for(uint8_t i = 0;i<8;i++)
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	88 30       	cpi	r24, 0x08	; 8
     dfc:	d0 f2       	brcs	.-76     	; 0xdb2 <LED_Output+0x4>
        else
        {
            cbi(PORTF,i);
        }
    }
}
     dfe:	08 95       	ret

00000e00 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	8f 93       	push	r24
    Timer_10ms_flag = 1; //10ms 마다 flag set
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Timer_10ms_flag>
    Timer_10ms_counter++;
     e12:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <Timer_10ms_counter>
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <Timer_10ms_counter>
    if(Timer_10ms_counter>=10)
     e1c:	8a 30       	cpi	r24, 0x0A	; 10
     e1e:	28 f0       	brcs	.+10     	; 0xe2a <__vector_12+0x2a>
    {
        Timer_10ms_counter = 0;
     e20:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <Timer_10ms_counter>
        Timer_100ms_flag = 1; // 100ms 마다 flag set
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Timer_100ms_flag>
    }
}
     e2a:	8f 91       	pop	r24
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	8f 93       	push	r24
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
    static uint8_t flag;
    if((Melody_status != MELODY_STATUS_START)&&(Melody_status != MELODY_STATUS_FINISHED))
     e4a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Melody_status>
     e4e:	88 23       	and	r24, r24
     e50:	b9 f0       	breq	.+46     	; 0xe80 <__vector_26+0x4a>
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	a9 f0       	breq	.+42     	; 0xe80 <__vector_26+0x4a>
    {
        if(flag == 0)
     e56:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     e5a:	81 11       	cpse	r24, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <__vector_26+0x3a>
        {
            sbi(PORTG,4);
     e5e:	e5 e6       	ldi	r30, 0x65	; 101
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 83       	st	Z, r24
            flag = 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <__vector_26+0x58>
        }
        else
        {
            cbi(PORTG,4);
     e70:	e5 e6       	ldi	r30, 0x65	; 101
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 7e       	andi	r24, 0xEF	; 239
     e78:	80 83       	st	Z, r24
            flag = 0;
     e7a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <__vector_26+0x58>
        }
    }
    else
    {
        cbi(PORTG,4);
     e80:	e5 e6       	ldi	r30, 0x65	; 101
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7e       	andi	r24, 0xEF	; 239
     e88:	80 83       	st	Z, r24
        flag = 0;
     e8a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
    }

}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	8f 91       	pop	r24
     e94:	0f 90       	pop	r0
     e96:	0b be       	out	0x3b, r0	; 59
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <Send_Char>:
    }
}

 void Send_Char(char data)
{
    while((UCSR1A & 0x20) == 0x0); 
     ea2:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ea6:	95 ff       	sbrs	r25, 5
     ea8:	fc cf       	rjmp	.-8      	; 0xea2 <Send_Char>
    UDR1 = data;
     eaa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     eae:	08 95       	ret

00000eb0 <Send_String>:
    }

}

void Send_String(char * buf,uint16_t length)
{
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	7c 01       	movw	r14, r24
     ebe:	8b 01       	movw	r16, r22
	uint16_t i;
    for(i = 0;i<length;i++)
     ec0:	c0 e0       	ldi	r28, 0x00	; 0
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <Send_String+0x22>
    {
        Send_Char(buf[i]);
     ec6:	f7 01       	movw	r30, r14
     ec8:	ec 0f       	add	r30, r28
     eca:	fd 1f       	adc	r31, r29
     ecc:	80 81       	ld	r24, Z
     ece:	e9 df       	rcall	.-46     	; 0xea2 <Send_Char>
}

void Send_String(char * buf,uint16_t length)
{
	uint16_t i;
    for(i = 0;i<length;i++)
     ed0:	21 96       	adiw	r28, 0x01	; 1
     ed2:	c0 17       	cp	r28, r16
     ed4:	d1 07       	cpc	r29, r17
     ed6:	b8 f3       	brcs	.-18     	; 0xec6 <Send_String+0x16>
    {
        Send_Char(buf[i]);
    }
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <LCD_Print>:
            }
        break;
    }
}
void LCD_Print(void)
{
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
    static uint8_t open_status,shift_counter;

    if(open_status == 0)
     eec:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <open_status.2183>
     ef0:	81 11       	cpse	r24, r1
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <LCD_Print+0x24>
    {
        shift_counter++;
     ef4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2184>
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <shift_counter.2184>
        if(shift_counter>= 10)
     efe:	8a 30       	cpi	r24, 0x0A	; 10
     f00:	68 f0       	brcs	.+26     	; 0xf1c <LCD_Print+0x36>
        {
            open_status = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <open_status.2183>
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <LCD_Print+0x36>
        }
    }
    else
    {
        shift_counter--;
     f0a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2184>
     f0e:	81 50       	subi	r24, 0x01	; 1
     f10:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <shift_counter.2184>
        if(shift_counter == 0)
     f14:	81 11       	cpse	r24, r1
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <LCD_Print+0x36>
        {
            open_status = 0;
     f18:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <open_status.2183>
        }
    }

    switch(Vending_Machine_status)
     f1c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Vending_Machine_status>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f4       	brne	.+2      	; 0xf26 <LCD_Print+0x40>
     f24:	5f c0       	rjmp	.+190    	; 0xfe4 <LCD_Print+0xfe>
     f26:	38 f0       	brcs	.+14     	; 0xf36 <LCD_Print+0x50>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	09 f4       	brne	.+2      	; 0xf2e <LCD_Print+0x48>
     f2c:	b0 c0       	rjmp	.+352    	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	09 f4       	brne	.+2      	; 0xf34 <LCD_Print+0x4e>
     f32:	f2 c0       	rjmp	.+484    	; 0x1118 <__stack+0x19>
     f34:	17 c1       	rjmp	.+558    	; 0x1164 <__stack+0x65>
    {
        case VENDING_MACHINE_IDLE :
            Clear_Tx_Buffer();
     f36:	7f de       	rcall	.-770    	; 0xc36 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	cc de       	rcall	.-616    	; 0xcd6 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[0],"vending machine");
     f3e:	80 e1       	ldi	r24, 0x10	; 16
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	ae e9       	ldi	r26, 0x9E	; 158
     f46:	b1 e0       	ldi	r27, 0x01	; 1
     f48:	01 90       	ld	r0, Z+
     f4a:	0d 92       	st	X+, r0
     f4c:	8a 95       	dec	r24
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <LCD_Print+0x62>
            LCD_Tx_Data[15] = '\n';
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <LCD_Tx_Data+0xf>
            Send_String(&LCD_Tx_Data[0],16);
     f56:	60 e1       	ldi	r22, 0x10	; 16
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	8e e9       	ldi	r24, 0x9E	; 158
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	a8 df       	rcall	.-176    	; 0xeb0 <Send_String>
            
            for(uint8_t i = 0;i<16;i++)
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <LCD_Print+0x8c>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     f64:	ec 2f       	mov	r30, r28
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	e2 56       	subi	r30, 0x62	; 98
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	80 81       	ld	r24, Z
     f6e:	bb de       	rcall	.-650    	; 0xce6 <LCD_Transmit_Data>
            LCD_Cursor(0,0);
            sprintf(&LCD_Tx_Data[0],"vending machine");
            LCD_Tx_Data[15] = '\n';
            Send_String(&LCD_Tx_Data[0],16);
            
            for(uint8_t i = 0;i<16;i++)
     f70:	cf 5f       	subi	r28, 0xFF	; 255
     f72:	c0 31       	cpi	r28, 0x10	; 16
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
     f74:	b8 f3       	brcs	.-18     	; 0xf64 <LCD_Print+0x7e>
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	ad de       	rcall	.-678    	; 0xcd6 <LCD_Cursor>
            LCD_Tx_Data[16+shift_counter] = '-';
     f7c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <shift_counter.2184>
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	fc 01       	movw	r30, r24
     f84:	e2 55       	subi	r30, 0x52	; 82
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	2d e2       	ldi	r18, 0x2D	; 45
     f8a:	20 83       	st	Z, r18
            LCD_Tx_Data[17+shift_counter] = 'O';
     f8c:	fc 01       	movw	r30, r24
     f8e:	e1 55       	subi	r30, 0x51	; 81
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	3f e4       	ldi	r19, 0x4F	; 79
     f94:	30 83       	st	Z, r19
            LCD_Tx_Data[18+shift_counter] = 'P';
     f96:	fc 01       	movw	r30, r24
     f98:	e0 55       	subi	r30, 0x50	; 80
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	30 e5       	ldi	r19, 0x50	; 80
     f9e:	30 83       	st	Z, r19
            LCD_Tx_Data[19+shift_counter] = 'E';
     fa0:	fc 01       	movw	r30, r24
     fa2:	ef 54       	subi	r30, 0x4F	; 79
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	35 e4       	ldi	r19, 0x45	; 69
     fa8:	30 83       	st	Z, r19
            LCD_Tx_Data[20+shift_counter] = 'N';
     faa:	fc 01       	movw	r30, r24
     fac:	ee 54       	subi	r30, 0x4E	; 78
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	3e e4       	ldi	r19, 0x4E	; 78
     fb2:	30 83       	st	Z, r19
            LCD_Tx_Data[21+shift_counter] = '-';
     fb4:	fc 01       	movw	r30, r24
     fb6:	ed 54       	subi	r30, 0x4D	; 77
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	20 83       	st	Z, r18
            LCD_Tx_Data[31] = '\n';
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <LCD_Tx_Data+0x1f>
            Send_String(&LCD_Tx_Data[16],16);
     fc2:	60 e1       	ldi	r22, 0x10	; 16
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	8e ea       	ldi	r24, 0xAE	; 174
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	72 df       	rcall	.-284    	; 0xeb0 <Send_String>
            for(uint8_t i = 16;i<32;i++)
     fcc:	c0 e1       	ldi	r28, 0x10	; 16
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
     fce:	07 c0       	rjmp	.+14     	; 0xfde <LCD_Print+0xf8>
     fd0:	ec 2f       	mov	r30, r28
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e2 56       	subi	r30, 0x62	; 98
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	80 81       	ld	r24, Z
            LCD_Tx_Data[19+shift_counter] = 'E';
            LCD_Tx_Data[20+shift_counter] = 'N';
            LCD_Tx_Data[21+shift_counter] = '-';
            LCD_Tx_Data[31] = '\n';
            Send_String(&LCD_Tx_Data[16],16);
            for(uint8_t i = 16;i<32;i++)
     fda:	85 de       	rcall	.-758    	; 0xce6 <LCD_Transmit_Data>
     fdc:	cf 5f       	subi	r28, 0xFF	; 255
     fde:	c0 32       	cpi	r28, 0x20	; 32
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }            
        break;
        case VENDING_MACHINE_INSERT_COIN :
            Clear_Tx_Buffer();
     fe0:	b8 f3       	brcs	.-18     	; 0xfd0 <LCD_Print+0xea>
     fe2:	c0 c0       	rjmp	.+384    	; 0x1164 <__stack+0x65>
            LCD_Cursor(0,0);
     fe4:	28 de       	rcall	.-944    	; 0xc36 <Clear_Tx_Buffer>
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	75 de       	rcall	.-790    	; 0xcd6 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[0]," insert money");
     fec:	8e e0       	ldi	r24, 0x0E	; 14
     fee:	e4 e4       	ldi	r30, 0x44	; 68
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	ae e9       	ldi	r26, 0x9E	; 158
     ff4:	b1 e0       	ldi	r27, 0x01	; 1
     ff6:	01 90       	ld	r0, Z+
     ff8:	0d 92       	st	X+, r0
     ffa:	8a 95       	dec	r24
            LCD_Tx_Data[15] = '\n';
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <LCD_Print+0x110>
     ffe:	8a e0       	ldi	r24, 0x0A	; 10
    1000:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <LCD_Tx_Data+0xf>
            Send_String(&LCD_Tx_Data[0],16);
    1004:	60 e1       	ldi	r22, 0x10	; 16
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	8e e9       	ldi	r24, 0x9E	; 158
    100a:	91 e0       	ldi	r25, 0x01	; 1
            for(uint8_t i = 0;i<16;i++)
    100c:	51 df       	rcall	.-350    	; 0xeb0 <Send_String>
    100e:	c0 e0       	ldi	r28, 0x00	; 0
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1012:	ec 2f       	mov	r30, r28
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	e2 56       	subi	r30, 0x62	; 98
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	80 81       	ld	r24, Z
            Clear_Tx_Buffer();
            LCD_Cursor(0,0);
            sprintf(&LCD_Tx_Data[0]," insert money");
            LCD_Tx_Data[15] = '\n';
            Send_String(&LCD_Tx_Data[0],16);
            for(uint8_t i = 0;i<16;i++)
    101c:	64 de       	rcall	.-824    	; 0xce6 <LCD_Transmit_Data>
    101e:	cf 5f       	subi	r28, 0xFF	; 255
    1020:	c0 31       	cpi	r28, 0x10	; 16
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
    1022:	b8 f3       	brcs	.-18     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	56 de       	rcall	.-852    	; 0xcd6 <LCD_Cursor>
            LCD_Tx_Data[17] = Coin_n1000 + 0x30; // 숫자 ASCII 변환
    102a:	ee e9       	ldi	r30, 0x9E	; 158
    102c:	f1 e0       	ldi	r31, 0x01	; 1
    102e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Coin_n1000>
    1032:	80 5d       	subi	r24, 0xD0	; 208
    1034:	81 8b       	std	Z+17, r24	; 0x11
            LCD_Tx_Data[18] = Coin_n100 + 0x30; // 숫자 ASCII 변환
    1036:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Coin_n100>
    103a:	80 5d       	subi	r24, 0xD0	; 208
    103c:	82 8b       	std	Z+18, r24	; 0x12
            LCD_Tx_Data[19] = Coin_n10 + 0x30; // 숫자 ASCII 변환
    103e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <Coin_n10>
    1042:	80 5d       	subi	r24, 0xD0	; 208
    1044:	83 8b       	std	Z+19, r24	; 0x13
            LCD_Tx_Data[20] = Coin_n1 + 0x30; // 숫자 ASCII 변환
    1046:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Coin_n1>
    104a:	80 5d       	subi	r24, 0xD0	; 208
    104c:	84 8b       	std	Z+20, r24	; 0x14
            sprintf(&LCD_Tx_Data[22],"won");
    104e:	a4 eb       	ldi	r26, 0xB4	; 180
    1050:	b1 e0       	ldi	r27, 0x01	; 1
    1052:	87 e7       	ldi	r24, 0x77	; 119
    1054:	9f e6       	ldi	r25, 0x6F	; 111
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
    105c:	8e e6       	ldi	r24, 0x6E	; 110
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	13 96       	adiw	r26, 0x03	; 3
    1062:	9c 93       	st	X, r25
    1064:	8e 93       	st	-X, r24
            LCD_Tx_Data[31] = '\n';
    1066:	12 97       	sbiw	r26, 0x02	; 2
    1068:	8a e0       	ldi	r24, 0x0A	; 10
            Send_String(&LCD_Tx_Data[16],16);
    106a:	87 8f       	std	Z+31, r24	; 0x1f
    106c:	60 e1       	ldi	r22, 0x10	; 16
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	8e ea       	ldi	r24, 0xAE	; 174
    1072:	91 e0       	ldi	r25, 0x01	; 1
            for(uint8_t i = 16;i<32;i++)
    1074:	1d df       	rcall	.-454    	; 0xeb0 <Send_String>
    1076:	c0 e1       	ldi	r28, 0x10	; 16
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    107a:	ec 2f       	mov	r30, r28
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	e2 56       	subi	r30, 0x62	; 98
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	80 81       	ld	r24, Z
            LCD_Tx_Data[19] = Coin_n10 + 0x30; // 숫자 ASCII 변환
            LCD_Tx_Data[20] = Coin_n1 + 0x30; // 숫자 ASCII 변환
            sprintf(&LCD_Tx_Data[22],"won");
            LCD_Tx_Data[31] = '\n';
            Send_String(&LCD_Tx_Data[16],16);
            for(uint8_t i = 16;i<32;i++)
    1084:	30 de       	rcall	.-928    	; 0xce6 <LCD_Transmit_Data>
    1086:	cf 5f       	subi	r28, 0xFF	; 255
    1088:	c0 32       	cpi	r28, 0x20	; 32
    108a:	b8 f3       	brcs	.-18     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }   
        break;
        case VENDING_MACHINE_SELECT_ITEM :
            Clear_Tx_Buffer();
    108c:	6b c0       	rjmp	.+214    	; 0x1164 <__stack+0x65>
    108e:	d3 dd       	rcall	.-1114   	; 0xc36 <Clear_Tx_Buffer>
            LCD_Cursor(0,0);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	20 de       	rcall	.-960    	; 0xcd6 <LCD_Cursor>
    1096:	ce e9       	ldi	r28, 0x9E	; 158
            sprintf(&LCD_Tx_Data[0],"selected goods");
    1098:	d1 e0       	ldi	r29, 0x01	; 1
    109a:	8f e0       	ldi	r24, 0x0F	; 15
    109c:	e2 e5       	ldi	r30, 0x52	; 82
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	de 01       	movw	r26, r28
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	8a 95       	dec	r24
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
            LCD_Tx_Data[13] = 0x3E;
    10aa:	8e e3       	ldi	r24, 0x3E	; 62
    10ac:	8d 87       	std	Y+13, r24	; 0x0d
            LCD_Tx_Data[14] = Selected_Num + 0x30; // 숫자 ASCII 변환
    10ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Selected_Num>
    10b2:	80 5d       	subi	r24, 0xD0	; 208
            LCD_Tx_Data[15] = '\n';
    10b4:	8e 87       	std	Y+14, r24	; 0x0e
    10b6:	8a e0       	ldi	r24, 0x0A	; 10
            Send_String(&LCD_Tx_Data[0],16);
    10b8:	8f 87       	std	Y+15, r24	; 0x0f
    10ba:	60 e1       	ldi	r22, 0x10	; 16
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
            for(uint8_t i = 0;i<16;i++)
    10c0:	f7 de       	rcall	.-530    	; 0xeb0 <Send_String>
    10c2:	c0 e0       	ldi	r28, 0x00	; 0
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <__DATA_REGION_LENGTH__+0xd4>
    10c6:	ec 2f       	mov	r30, r28
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	e2 56       	subi	r30, 0x62	; 98
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 81       	ld	r24, Z
    10d0:	0a de       	rcall	.-1004   	; 0xce6 <LCD_Transmit_Data>
            sprintf(&LCD_Tx_Data[0],"selected goods");
            LCD_Tx_Data[13] = 0x3E;
            LCD_Tx_Data[14] = Selected_Num + 0x30; // 숫자 ASCII 변환
            LCD_Tx_Data[15] = '\n';
            Send_String(&LCD_Tx_Data[0],16);
            for(uint8_t i = 0;i<16;i++)
    10d2:	cf 5f       	subi	r28, 0xFF	; 255
    10d4:	c0 31       	cpi	r28, 0x10	; 16
    10d6:	b8 f3       	brcs	.-18     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }
            LCD_Cursor(1,0);
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	fc dd       	rcall	.-1032   	; 0xcd6 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[16],"buyit-A cancel-D");
    10de:	81 e1       	ldi	r24, 0x11	; 17
    10e0:	e1 e6       	ldi	r30, 0x61	; 97
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	ae ea       	ldi	r26, 0xAE	; 174
    10e6:	b1 e0       	ldi	r27, 0x01	; 1
    10e8:	01 90       	ld	r0, Z+
    10ea:	0d 92       	st	X+, r0
    10ec:	8a 95       	dec	r24
            LCD_Tx_Data[31] = '\n';
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
            Send_String(&LCD_Tx_Data[16],16);
    10f2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <LCD_Tx_Data+0x1f>
    10f6:	60 e1       	ldi	r22, 0x10	; 16
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	8e ea       	ldi	r24, 0xAE	; 174
            for(uint8_t i = 16;i<32;i++)
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	d8 de       	rcall	.-592    	; 0xeb0 <Send_String>
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
    1100:	c0 e1       	ldi	r28, 0x10	; 16
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <__stack+0x13>
    1104:	ec 2f       	mov	r30, r28
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	e2 56       	subi	r30, 0x62	; 98
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	80 81       	ld	r24, Z
            }
            LCD_Cursor(1,0);
            sprintf(&LCD_Tx_Data[16],"buyit-A cancel-D");
            LCD_Tx_Data[31] = '\n';
            Send_String(&LCD_Tx_Data[16],16);
            for(uint8_t i = 16;i<32;i++)
    110e:	eb dd       	rcall	.-1066   	; 0xce6 <LCD_Transmit_Data>
    1110:	cf 5f       	subi	r28, 0xFF	; 255
    1112:	c0 32       	cpi	r28, 0x20	; 32
            {
                LCD_Transmit_Data(LCD_Tx_Data[i]);
            }   
        break;
        case VENDING_MACHINE_MONEY_ERROR :
            Clear_Tx_Buffer();
    1114:	b8 f3       	brcs	.-18     	; 0x1104 <__stack+0x5>
            LCD_Cursor(0,0);        
    1116:	26 c0       	rjmp	.+76     	; 0x1164 <__stack+0x65>
    1118:	8e dd       	rcall	.-1252   	; 0xc36 <Clear_Tx_Buffer>
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
            sprintf(&LCD_Tx_Data[0]," be short of");
    111e:	db dd       	rcall	.-1098   	; 0xcd6 <LCD_Cursor>
    1120:	ce e9       	ldi	r28, 0x9E	; 158
    1122:	d1 e0       	ldi	r29, 0x01	; 1
    1124:	8d e0       	ldi	r24, 0x0D	; 13
    1126:	e2 e7       	ldi	r30, 0x72	; 114
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	de 01       	movw	r26, r28
    112c:	01 90       	ld	r0, Z+
    112e:	0d 92       	st	X+, r0
    1130:	8a 95       	dec	r24
            LCD_Tx_Data[15] = '\n';
    1132:	e1 f7       	brne	.-8      	; 0x112c <__stack+0x2d>
            Send_String(&LCD_Tx_Data[0],16);            
    1134:	1a e0       	ldi	r17, 0x0A	; 10
    1136:	1f 87       	std	Y+15, r17	; 0x0f
    1138:	60 e1       	ldi	r22, 0x10	; 16
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
            LCD_Cursor(1,0);        
    113e:	b8 de       	rcall	.-656    	; 0xeb0 <Send_String>
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	c8 dd       	rcall	.-1136   	; 0xcd6 <LCD_Cursor>
            sprintf(&LCD_Tx_Data[16],"  money.......");
    1146:	8f e0       	ldi	r24, 0x0F	; 15
    1148:	ef e7       	ldi	r30, 0x7F	; 127
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	ae ea       	ldi	r26, 0xAE	; 174
    114e:	b1 e0       	ldi	r27, 0x01	; 1
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	8a 95       	dec	r24
    1156:	e1 f7       	brne	.-8      	; 0x1150 <__stack+0x51>
            LCD_Tx_Data[32] = '\n';
    1158:	18 a3       	std	Y+32, r17	; 0x20
            Send_String(&LCD_Tx_Data[16],16);
    115a:	60 e1       	ldi	r22, 0x10	; 16
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	8e ea       	ldi	r24, 0xAE	; 174
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	a6 de       	rcall	.-692    	; 0xeb0 <Send_String>
    1164:	df 91       	pop	r29
        break;
    }

}
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	08 95       	ret

0000116c <Uart1_Init>:
    116c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
}

void Uart1_Init(void)
{
    UCSR1A = 0x0;
    UCSR1B = 0b00011000; //Uart1 Rx/Tx Enable
    1170:	88 e1       	ldi	r24, 0x18	; 24
    1172:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    UCSR1C = 0b00000110; //Uart1 8bit character size
    1176:	86 e0       	ldi	r24, 0x06	; 6
    1178:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    UBRR1H = 0;                                                  
    117c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    UBRR1L = 8; //Uart1 115200 bps        
    1180:	88 e0       	ldi	r24, 0x08	; 8
    1182:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1186:	08 95       	ret

00001188 <main>:
void Uart1_Init(void);
/*************************************/

int main(void)
{
    Port_Init();
    1188:	0e 94 7f 00 	call	0xfe	; 0xfe <Port_Init>
    LCD_Init();
    118c:	76 dd       	rcall	.-1300   	; 0xc7a <LCD_Init>
    Timer1_Init();
    118e:	0e 94 8d 00 	call	0x11a	; 0x11a <Timer1_Init>
    Timer3_Init();
    1192:	0e 94 95 00 	call	0x12a	; 0x12a <Timer3_Init>
    Uart1_Init();
    1196:	ea df       	rcall	.-44     	; 0x116c <Uart1_Init>
    ISR_Init();
    1198:	0e 94 a1 00 	call	0x142	; 0x142 <ISR_Init>
    while (1) 
    {
        if(Timer_10ms_flag == 1)
    119c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Timer_10ms_flag>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <main+0x2c>
        {
            Timer_10ms_flag = 0;
    11a4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Timer_10ms_flag>
            Key_Scan();
    11a8:	0e 94 a8 00 	call	0x150	; 0x150 <Key_Scan>
            Switch_Scan();
            Vending_Machine_Mode();
    11ac:	6b d8       	rcall	.-3882   	; 0x284 <Switch_Scan>
    11ae:	da d9       	rcall	.-3148   	; 0x564 <Vending_Machine_Mode>
            Melody_Update();
    11b0:	8d da       	rcall	.-2790   	; 0x6cc <Melody_Update>
    11b2:	af dd       	rcall	.-1186   	; 0xd12 <Seven_Segment_Output>
            Seven_Segment_Output();
    11b4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <Timer_100ms_flag>
        }

        if(Timer_100ms_flag == 1)
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	81 f7       	brne	.-32     	; 0x119c <main+0x14>
        {
            Timer_100ms_flag = 0;
    11bc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <Timer_100ms_flag>
            LED_Output();
    11c0:	f6 dd       	rcall	.-1044   	; 0xdae <LED_Output>
    11c2:	91 de       	rcall	.-734    	; 0xee6 <LCD_Print>
            LCD_Print();
    11c4:	eb cf       	rjmp	.-42     	; 0x119c <main+0x14>

000011c6 <__tablejump2__>:
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	00 24       	eor	r0, r0
    11cc:	00 1c       	adc	r0, r0
    11ce:	0b be       	out	0x3b, r0	; 59
    11d0:	07 90       	elpm	r0, Z+
    11d2:	f6 91       	elpm	r31, Z
    11d4:	e0 2d       	mov	r30, r0
    11d6:	09 94       	ijmp

000011d8 <__umulhisi3>:
    11d8:	a2 9f       	mul	r26, r18
    11da:	b0 01       	movw	r22, r0
    11dc:	b3 9f       	mul	r27, r19
    11de:	c0 01       	movw	r24, r0
    11e0:	a3 9f       	mul	r26, r19
    11e2:	70 0d       	add	r23, r0
    11e4:	81 1d       	adc	r24, r1
    11e6:	11 24       	eor	r1, r1
    11e8:	91 1d       	adc	r25, r1
    11ea:	b2 9f       	mul	r27, r18
    11ec:	70 0d       	add	r23, r0
    11ee:	81 1d       	adc	r24, r1
    11f0:	11 24       	eor	r1, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
